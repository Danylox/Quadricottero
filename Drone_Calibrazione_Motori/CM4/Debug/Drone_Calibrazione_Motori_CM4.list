
Drone_Calibrazione_Motori_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002868  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08102b00  08102b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102b10  08102b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102b14  08102b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  10000000  08102b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  10000014  08102b2c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100000cc  08102b2c  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d1e2  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d2d  00000000  00000000  0002d269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cb8  00000000  00000000  0002ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009c8  00000000  00000000  0002fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389e1  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ed2a  00000000  00000000  00068ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a675  00000000  00000000  00077d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000034a0  00000000  00000000  001f2398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000079  00000000  00000000  001f5838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000014 	.word	0x10000014
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102ae8 	.word	0x08102ae8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000018 	.word	0x10000018
 81002d4:	08102ae8 	.word	0x08102ae8

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b2e      	ldr	r3, [pc, #184]	; (81003c8 <main+0xc0>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a2c      	ldr	r2, [pc, #176]	; (81003c8 <main+0xc0>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b2a      	ldr	r3, [pc, #168]	; (81003c8 <main+0xc0>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 ff3b 	bl	81011a8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 ffc5 	bl	81012c0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 ff46 	bl	81011cc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b22      	ldr	r3, [pc, #136]	; (81003cc <main+0xc4>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b20      	ldr	r3, [pc, #128]	; (81003d0 <main+0xc8>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a1e      	ldr	r2, [pc, #120]	; (81003d0 <main+0xc8>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b1b      	ldr	r3, [pc, #108]	; (81003d0 <main+0xc8>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a1a      	ldr	r2, [pc, #104]	; (81003d0 <main+0xc8>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 fb54 	bl	8100a1c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 f922 	bl	81005bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8100378:	f000 f834 	bl	81003e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 810037c:	f000 f886 	bl	810048c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8100380:	2100      	movs	r1, #0
 8100382:	4814      	ldr	r0, [pc, #80]	; (81003d4 <main+0xcc>)
 8100384:	f001 fa4e 	bl	8101824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8100388:	2104      	movs	r1, #4
 810038a:	4812      	ldr	r0, [pc, #72]	; (81003d4 <main+0xcc>)
 810038c:	f001 fa4a 	bl	8101824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8100390:	2108      	movs	r1, #8
 8100392:	4810      	ldr	r0, [pc, #64]	; (81003d4 <main+0xcc>)
 8100394:	f001 fa46 	bl	8101824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8100398:	210c      	movs	r1, #12
 810039a:	480e      	ldr	r0, [pc, #56]	; (81003d4 <main+0xcc>)
 810039c:	f001 fa42 	bl	8101824 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 81003a0:	480d      	ldr	r0, [pc, #52]	; (81003d8 <main+0xd0>)
 81003a2:	f001 f96d 	bl	8101680 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(calibrateFlag == 1)
 81003a6:	4b0d      	ldr	r3, [pc, #52]	; (81003dc <main+0xd4>)
 81003a8:	681b      	ldr	r3, [r3, #0]
 81003aa:	2b01      	cmp	r3, #1
 81003ac:	d101      	bne.n	81003b2 <main+0xaa>
	{
		ESC_Calibrate();
 81003ae:	f000 f985 	bl	81006bc <ESC_Calibrate>
	}


	HAL_Delay(2000);
 81003b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 81003b6:	f000 fbe5 	bl	8100b84 <HAL_Delay>

	HAL_Delay(2000);*/

	while (1) //Loop infinito di attesa
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Led rosso
 81003ba:	2201      	movs	r2, #1
 81003bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81003c0:	4807      	ldr	r0, [pc, #28]	; (81003e0 <main+0xd8>)
 81003c2:	f000 fed7 	bl	8101174 <HAL_GPIO_WritePin>
 81003c6:	e7f8      	b.n	81003ba <main+0xb2>
 81003c8:	58024400 	.word	0x58024400
 81003cc:	e000ed00 	.word	0xe000ed00
 81003d0:	58026400 	.word	0x58026400
 81003d4:	1000007c 	.word	0x1000007c
 81003d8:	10000030 	.word	0x10000030
 81003dc:	10000008 	.word	0x10000008
 81003e0:	58020400 	.word	0x58020400

081003e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81003e4:	b580      	push	{r7, lr}
 81003e6:	b088      	sub	sp, #32
 81003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81003ea:	f107 0310 	add.w	r3, r7, #16
 81003ee:	2200      	movs	r2, #0
 81003f0:	601a      	str	r2, [r3, #0]
 81003f2:	605a      	str	r2, [r3, #4]
 81003f4:	609a      	str	r2, [r3, #8]
 81003f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81003f8:	1d3b      	adds	r3, r7, #4
 81003fa:	2200      	movs	r2, #0
 81003fc:	601a      	str	r2, [r3, #0]
 81003fe:	605a      	str	r2, [r3, #4]
 8100400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8100402:	4b20      	ldr	r3, [pc, #128]	; (8100484 <MX_TIM1_Init+0xa0>)
 8100404:	4a20      	ldr	r2, [pc, #128]	; (8100488 <MX_TIM1_Init+0xa4>)
 8100406:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8100408:	4b1e      	ldr	r3, [pc, #120]	; (8100484 <MX_TIM1_Init+0xa0>)
 810040a:	223f      	movs	r2, #63	; 0x3f
 810040c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810040e:	4b1d      	ldr	r3, [pc, #116]	; (8100484 <MX_TIM1_Init+0xa0>)
 8100410:	2200      	movs	r2, #0
 8100412:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8100414:	4b1b      	ldr	r3, [pc, #108]	; (8100484 <MX_TIM1_Init+0xa0>)
 8100416:	f242 720f 	movw	r2, #9999	; 0x270f
 810041a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810041c:	4b19      	ldr	r3, [pc, #100]	; (8100484 <MX_TIM1_Init+0xa0>)
 810041e:	2200      	movs	r2, #0
 8100420:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8100422:	4b18      	ldr	r3, [pc, #96]	; (8100484 <MX_TIM1_Init+0xa0>)
 8100424:	2200      	movs	r2, #0
 8100426:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100428:	4b16      	ldr	r3, [pc, #88]	; (8100484 <MX_TIM1_Init+0xa0>)
 810042a:	2200      	movs	r2, #0
 810042c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810042e:	4815      	ldr	r0, [pc, #84]	; (8100484 <MX_TIM1_Init+0xa0>)
 8100430:	f001 f8ce 	bl	81015d0 <HAL_TIM_Base_Init>
 8100434:	4603      	mov	r3, r0
 8100436:	2b00      	cmp	r3, #0
 8100438:	d001      	beq.n	810043e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 810043a:	f000 f939 	bl	81006b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810043e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100442:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8100444:	f107 0310 	add.w	r3, r7, #16
 8100448:	4619      	mov	r1, r3
 810044a:	480e      	ldr	r0, [pc, #56]	; (8100484 <MX_TIM1_Init+0xa0>)
 810044c:	f001 fd14 	bl	8101e78 <HAL_TIM_ConfigClockSource>
 8100450:	4603      	mov	r3, r0
 8100452:	2b00      	cmp	r3, #0
 8100454:	d001      	beq.n	810045a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8100456:	f000 f92b 	bl	81006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810045a:	2300      	movs	r3, #0
 810045c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810045e:	2300      	movs	r3, #0
 8100460:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100462:	2300      	movs	r3, #0
 8100464:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8100466:	1d3b      	adds	r3, r7, #4
 8100468:	4619      	mov	r1, r3
 810046a:	4806      	ldr	r0, [pc, #24]	; (8100484 <MX_TIM1_Init+0xa0>)
 810046c:	f002 fa6c 	bl	8102948 <HAL_TIMEx_MasterConfigSynchronization>
 8100470:	4603      	mov	r3, r0
 8100472:	2b00      	cmp	r3, #0
 8100474:	d001      	beq.n	810047a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8100476:	f000 f91b 	bl	81006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 810047a:	bf00      	nop
 810047c:	3720      	adds	r7, #32
 810047e:	46bd      	mov	sp, r7
 8100480:	bd80      	pop	{r7, pc}
 8100482:	bf00      	nop
 8100484:	10000030 	.word	0x10000030
 8100488:	40010000 	.word	0x40010000

0810048c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 810048c:	b580      	push	{r7, lr}
 810048e:	b08e      	sub	sp, #56	; 0x38
 8100490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100496:	2200      	movs	r2, #0
 8100498:	601a      	str	r2, [r3, #0]
 810049a:	605a      	str	r2, [r3, #4]
 810049c:	609a      	str	r2, [r3, #8]
 810049e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81004a0:	f107 031c 	add.w	r3, r7, #28
 81004a4:	2200      	movs	r2, #0
 81004a6:	601a      	str	r2, [r3, #0]
 81004a8:	605a      	str	r2, [r3, #4]
 81004aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81004ac:	463b      	mov	r3, r7
 81004ae:	2200      	movs	r2, #0
 81004b0:	601a      	str	r2, [r3, #0]
 81004b2:	605a      	str	r2, [r3, #4]
 81004b4:	609a      	str	r2, [r3, #8]
 81004b6:	60da      	str	r2, [r3, #12]
 81004b8:	611a      	str	r2, [r3, #16]
 81004ba:	615a      	str	r2, [r3, #20]
 81004bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81004be:	4b3d      	ldr	r3, [pc, #244]	; (81005b4 <MX_TIM3_Init+0x128>)
 81004c0:	4a3d      	ldr	r2, [pc, #244]	; (81005b8 <MX_TIM3_Init+0x12c>)
 81004c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 81004c4:	4b3b      	ldr	r3, [pc, #236]	; (81005b4 <MX_TIM3_Init+0x128>)
 81004c6:	223f      	movs	r2, #63	; 0x3f
 81004c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81004ca:	4b3a      	ldr	r3, [pc, #232]	; (81005b4 <MX_TIM3_Init+0x128>)
 81004cc:	2200      	movs	r2, #0
 81004ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 81004d0:	4b38      	ldr	r3, [pc, #224]	; (81005b4 <MX_TIM3_Init+0x128>)
 81004d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81004d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81004d8:	4b36      	ldr	r3, [pc, #216]	; (81005b4 <MX_TIM3_Init+0x128>)
 81004da:	2200      	movs	r2, #0
 81004dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81004de:	4b35      	ldr	r3, [pc, #212]	; (81005b4 <MX_TIM3_Init+0x128>)
 81004e0:	2200      	movs	r2, #0
 81004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81004e4:	4833      	ldr	r0, [pc, #204]	; (81005b4 <MX_TIM3_Init+0x128>)
 81004e6:	f001 f873 	bl	81015d0 <HAL_TIM_Base_Init>
 81004ea:	4603      	mov	r3, r0
 81004ec:	2b00      	cmp	r3, #0
 81004ee:	d001      	beq.n	81004f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 81004f0:	f000 f8de 	bl	81006b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81004f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81004f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81004fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81004fe:	4619      	mov	r1, r3
 8100500:	482c      	ldr	r0, [pc, #176]	; (81005b4 <MX_TIM3_Init+0x128>)
 8100502:	f001 fcb9 	bl	8101e78 <HAL_TIM_ConfigClockSource>
 8100506:	4603      	mov	r3, r0
 8100508:	2b00      	cmp	r3, #0
 810050a:	d001      	beq.n	8100510 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 810050c:	f000 f8d0 	bl	81006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8100510:	4828      	ldr	r0, [pc, #160]	; (81005b4 <MX_TIM3_Init+0x128>)
 8100512:	f001 f925 	bl	8101760 <HAL_TIM_PWM_Init>
 8100516:	4603      	mov	r3, r0
 8100518:	2b00      	cmp	r3, #0
 810051a:	d001      	beq.n	8100520 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 810051c:	f000 f8c8 	bl	81006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100520:	2300      	movs	r3, #0
 8100522:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100524:	2300      	movs	r3, #0
 8100526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8100528:	f107 031c 	add.w	r3, r7, #28
 810052c:	4619      	mov	r1, r3
 810052e:	4821      	ldr	r0, [pc, #132]	; (81005b4 <MX_TIM3_Init+0x128>)
 8100530:	f002 fa0a 	bl	8102948 <HAL_TIMEx_MasterConfigSynchronization>
 8100534:	4603      	mov	r3, r0
 8100536:	2b00      	cmp	r3, #0
 8100538:	d001      	beq.n	810053e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 810053a:	f000 f8b9 	bl	81006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810053e:	2360      	movs	r3, #96	; 0x60
 8100540:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8100542:	2300      	movs	r3, #0
 8100544:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100546:	2300      	movs	r3, #0
 8100548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810054a:	2300      	movs	r3, #0
 810054c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810054e:	463b      	mov	r3, r7
 8100550:	2200      	movs	r2, #0
 8100552:	4619      	mov	r1, r3
 8100554:	4817      	ldr	r0, [pc, #92]	; (81005b4 <MX_TIM3_Init+0x128>)
 8100556:	f001 fb7b 	bl	8101c50 <HAL_TIM_PWM_ConfigChannel>
 810055a:	4603      	mov	r3, r0
 810055c:	2b00      	cmp	r3, #0
 810055e:	d001      	beq.n	8100564 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8100560:	f000 f8a6 	bl	81006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100564:	463b      	mov	r3, r7
 8100566:	2204      	movs	r2, #4
 8100568:	4619      	mov	r1, r3
 810056a:	4812      	ldr	r0, [pc, #72]	; (81005b4 <MX_TIM3_Init+0x128>)
 810056c:	f001 fb70 	bl	8101c50 <HAL_TIM_PWM_ConfigChannel>
 8100570:	4603      	mov	r3, r0
 8100572:	2b00      	cmp	r3, #0
 8100574:	d001      	beq.n	810057a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8100576:	f000 f89b 	bl	81006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810057a:	463b      	mov	r3, r7
 810057c:	2208      	movs	r2, #8
 810057e:	4619      	mov	r1, r3
 8100580:	480c      	ldr	r0, [pc, #48]	; (81005b4 <MX_TIM3_Init+0x128>)
 8100582:	f001 fb65 	bl	8101c50 <HAL_TIM_PWM_ConfigChannel>
 8100586:	4603      	mov	r3, r0
 8100588:	2b00      	cmp	r3, #0
 810058a:	d001      	beq.n	8100590 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 810058c:	f000 f890 	bl	81006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8100590:	463b      	mov	r3, r7
 8100592:	220c      	movs	r2, #12
 8100594:	4619      	mov	r1, r3
 8100596:	4807      	ldr	r0, [pc, #28]	; (81005b4 <MX_TIM3_Init+0x128>)
 8100598:	f001 fb5a 	bl	8101c50 <HAL_TIM_PWM_ConfigChannel>
 810059c:	4603      	mov	r3, r0
 810059e:	2b00      	cmp	r3, #0
 81005a0:	d001      	beq.n	81005a6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 81005a2:	f000 f885 	bl	81006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 81005a6:	4803      	ldr	r0, [pc, #12]	; (81005b4 <MX_TIM3_Init+0x128>)
 81005a8:	f000 f95c 	bl	8100864 <HAL_TIM_MspPostInit>

}
 81005ac:	bf00      	nop
 81005ae:	3738      	adds	r7, #56	; 0x38
 81005b0:	46bd      	mov	sp, r7
 81005b2:	bd80      	pop	{r7, pc}
 81005b4:	1000007c 	.word	0x1000007c
 81005b8:	40000400 	.word	0x40000400

081005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81005bc:	b580      	push	{r7, lr}
 81005be:	b08a      	sub	sp, #40	; 0x28
 81005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81005c2:	f107 0314 	add.w	r3, r7, #20
 81005c6:	2200      	movs	r2, #0
 81005c8:	601a      	str	r2, [r3, #0]
 81005ca:	605a      	str	r2, [r3, #4]
 81005cc:	609a      	str	r2, [r3, #8]
 81005ce:	60da      	str	r2, [r3, #12]
 81005d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81005d2:	4b34      	ldr	r3, [pc, #208]	; (81006a4 <MX_GPIO_Init+0xe8>)
 81005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005d8:	4a32      	ldr	r2, [pc, #200]	; (81006a4 <MX_GPIO_Init+0xe8>)
 81005da:	f043 0301 	orr.w	r3, r3, #1
 81005de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005e2:	4b30      	ldr	r3, [pc, #192]	; (81006a4 <MX_GPIO_Init+0xe8>)
 81005e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005e8:	f003 0301 	and.w	r3, r3, #1
 81005ec:	613b      	str	r3, [r7, #16]
 81005ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81005f0:	4b2c      	ldr	r3, [pc, #176]	; (81006a4 <MX_GPIO_Init+0xe8>)
 81005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005f6:	4a2b      	ldr	r2, [pc, #172]	; (81006a4 <MX_GPIO_Init+0xe8>)
 81005f8:	f043 0302 	orr.w	r3, r3, #2
 81005fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100600:	4b28      	ldr	r3, [pc, #160]	; (81006a4 <MX_GPIO_Init+0xe8>)
 8100602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100606:	f003 0302 	and.w	r3, r3, #2
 810060a:	60fb      	str	r3, [r7, #12]
 810060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810060e:	4b25      	ldr	r3, [pc, #148]	; (81006a4 <MX_GPIO_Init+0xe8>)
 8100610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100614:	4a23      	ldr	r2, [pc, #140]	; (81006a4 <MX_GPIO_Init+0xe8>)
 8100616:	f043 0304 	orr.w	r3, r3, #4
 810061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810061e:	4b21      	ldr	r3, [pc, #132]	; (81006a4 <MX_GPIO_Init+0xe8>)
 8100620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100624:	f003 0304 	and.w	r3, r3, #4
 8100628:	60bb      	str	r3, [r7, #8]
 810062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810062c:	4b1d      	ldr	r3, [pc, #116]	; (81006a4 <MX_GPIO_Init+0xe8>)
 810062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100632:	4a1c      	ldr	r2, [pc, #112]	; (81006a4 <MX_GPIO_Init+0xe8>)
 8100634:	f043 0310 	orr.w	r3, r3, #16
 8100638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810063c:	4b19      	ldr	r3, [pc, #100]	; (81006a4 <MX_GPIO_Init+0xe8>)
 810063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100642:	f003 0310 	and.w	r3, r3, #16
 8100646:	607b      	str	r3, [r7, #4]
 8100648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 810064a:	2200      	movs	r2, #0
 810064c:	f244 0101 	movw	r1, #16385	; 0x4001
 8100650:	4815      	ldr	r0, [pc, #84]	; (81006a8 <MX_GPIO_Init+0xec>)
 8100652:	f000 fd8f 	bl	8101174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100656:	2200      	movs	r2, #0
 8100658:	2102      	movs	r1, #2
 810065a:	4814      	ldr	r0, [pc, #80]	; (81006ac <MX_GPIO_Init+0xf0>)
 810065c:	f000 fd8a 	bl	8101174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8100660:	f244 0301 	movw	r3, #16385	; 0x4001
 8100664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100666:	2301      	movs	r3, #1
 8100668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810066a:	2300      	movs	r3, #0
 810066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810066e:	2300      	movs	r3, #0
 8100670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100672:	f107 0314 	add.w	r3, r7, #20
 8100676:	4619      	mov	r1, r3
 8100678:	480b      	ldr	r0, [pc, #44]	; (81006a8 <MX_GPIO_Init+0xec>)
 810067a:	f000 fbcb 	bl	8100e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 810067e:	2302      	movs	r3, #2
 8100680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100682:	2301      	movs	r3, #1
 8100684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100686:	2300      	movs	r3, #0
 8100688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810068a:	2300      	movs	r3, #0
 810068c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 810068e:	f107 0314 	add.w	r3, r7, #20
 8100692:	4619      	mov	r1, r3
 8100694:	4805      	ldr	r0, [pc, #20]	; (81006ac <MX_GPIO_Init+0xf0>)
 8100696:	f000 fbbd 	bl	8100e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810069a:	bf00      	nop
 810069c:	3728      	adds	r7, #40	; 0x28
 810069e:	46bd      	mov	sp, r7
 81006a0:	bd80      	pop	{r7, pc}
 81006a2:	bf00      	nop
 81006a4:	58024400 	.word	0x58024400
 81006a8:	58020400 	.word	0x58020400
 81006ac:	58021000 	.word	0x58021000

081006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81006b0:	b480      	push	{r7}
 81006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81006b4:	b672      	cpsid	i
}
 81006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81006b8:	e7fe      	b.n	81006b8 <Error_Handler+0x8>
	...

081006bc <ESC_Calibrate>:
	TIM3->CCR3 = (uint32_t)(TIM3->ARR * pwm3/100); //avgMotor3;
	TIM3->CCR4 = (uint32_t)(TIM3->ARR * pwm4/100); //avgMotor4;
}

void ESC_Calibrate()
{
 81006bc:	b580      	push	{r7, lr}
 81006be:	af00      	add	r7, sp, #0
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 81006c0:	4b37      	ldr	r3, [pc, #220]	; (81007a0 <ESC_Calibrate+0xe4>)
 81006c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81006c4:	4613      	mov	r3, r2
 81006c6:	009b      	lsls	r3, r3, #2
 81006c8:	4413      	add	r3, r2
 81006ca:	005b      	lsls	r3, r3, #1
 81006cc:	4619      	mov	r1, r3
 81006ce:	4a34      	ldr	r2, [pc, #208]	; (81007a0 <ESC_Calibrate+0xe4>)
 81006d0:	4b34      	ldr	r3, [pc, #208]	; (81007a4 <ESC_Calibrate+0xe8>)
 81006d2:	fba3 1301 	umull	r1, r3, r3, r1
 81006d6:	095b      	lsrs	r3, r3, #5
 81006d8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 81006da:	4b31      	ldr	r3, [pc, #196]	; (81007a0 <ESC_Calibrate+0xe4>)
 81006dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81006de:	4613      	mov	r3, r2
 81006e0:	009b      	lsls	r3, r3, #2
 81006e2:	4413      	add	r3, r2
 81006e4:	005b      	lsls	r3, r3, #1
 81006e6:	4619      	mov	r1, r3
 81006e8:	4a2d      	ldr	r2, [pc, #180]	; (81007a0 <ESC_Calibrate+0xe4>)
 81006ea:	4b2e      	ldr	r3, [pc, #184]	; (81007a4 <ESC_Calibrate+0xe8>)
 81006ec:	fba3 1301 	umull	r1, r3, r3, r1
 81006f0:	095b      	lsrs	r3, r3, #5
 81006f2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 81006f4:	4b2a      	ldr	r3, [pc, #168]	; (81007a0 <ESC_Calibrate+0xe4>)
 81006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81006f8:	4613      	mov	r3, r2
 81006fa:	009b      	lsls	r3, r3, #2
 81006fc:	4413      	add	r3, r2
 81006fe:	005b      	lsls	r3, r3, #1
 8100700:	4619      	mov	r1, r3
 8100702:	4a27      	ldr	r2, [pc, #156]	; (81007a0 <ESC_Calibrate+0xe4>)
 8100704:	4b27      	ldr	r3, [pc, #156]	; (81007a4 <ESC_Calibrate+0xe8>)
 8100706:	fba3 1301 	umull	r1, r3, r3, r1
 810070a:	095b      	lsrs	r3, r3, #5
 810070c:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 810070e:	4b24      	ldr	r3, [pc, #144]	; (81007a0 <ESC_Calibrate+0xe4>)
 8100710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8100712:	4613      	mov	r3, r2
 8100714:	009b      	lsls	r3, r3, #2
 8100716:	4413      	add	r3, r2
 8100718:	005b      	lsls	r3, r3, #1
 810071a:	4619      	mov	r1, r3
 810071c:	4a20      	ldr	r2, [pc, #128]	; (81007a0 <ESC_Calibrate+0xe4>)
 810071e:	4b21      	ldr	r3, [pc, #132]	; (81007a4 <ESC_Calibrate+0xe8>)
 8100720:	fba3 1301 	umull	r1, r3, r3, r1
 8100724:	095b      	lsrs	r3, r3, #5
 8100726:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Led verde
 8100728:	2201      	movs	r2, #1
 810072a:	2101      	movs	r1, #1
 810072c:	481e      	ldr	r0, [pc, #120]	; (81007a8 <ESC_Calibrate+0xec>)
 810072e:	f000 fd21 	bl	8101174 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8100732:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8100736:	f000 fa25 	bl	8100b84 <HAL_Delay>
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 810073a:	4b19      	ldr	r3, [pc, #100]	; (81007a0 <ESC_Calibrate+0xe4>)
 810073c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810073e:	4613      	mov	r3, r2
 8100740:	009b      	lsls	r3, r3, #2
 8100742:	4413      	add	r3, r2
 8100744:	4a16      	ldr	r2, [pc, #88]	; (81007a0 <ESC_Calibrate+0xe4>)
 8100746:	4917      	ldr	r1, [pc, #92]	; (81007a4 <ESC_Calibrate+0xe8>)
 8100748:	fba1 1303 	umull	r1, r3, r1, r3
 810074c:	095b      	lsrs	r3, r3, #5
 810074e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8100750:	4b13      	ldr	r3, [pc, #76]	; (81007a0 <ESC_Calibrate+0xe4>)
 8100752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8100754:	4613      	mov	r3, r2
 8100756:	009b      	lsls	r3, r3, #2
 8100758:	4413      	add	r3, r2
 810075a:	4a11      	ldr	r2, [pc, #68]	; (81007a0 <ESC_Calibrate+0xe4>)
 810075c:	4911      	ldr	r1, [pc, #68]	; (81007a4 <ESC_Calibrate+0xe8>)
 810075e:	fba1 1303 	umull	r1, r3, r1, r3
 8100762:	095b      	lsrs	r3, r3, #5
 8100764:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8100766:	4b0e      	ldr	r3, [pc, #56]	; (81007a0 <ESC_Calibrate+0xe4>)
 8100768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810076a:	4613      	mov	r3, r2
 810076c:	009b      	lsls	r3, r3, #2
 810076e:	4413      	add	r3, r2
 8100770:	4a0b      	ldr	r2, [pc, #44]	; (81007a0 <ESC_Calibrate+0xe4>)
 8100772:	490c      	ldr	r1, [pc, #48]	; (81007a4 <ESC_Calibrate+0xe8>)
 8100774:	fba1 1303 	umull	r1, r3, r1, r3
 8100778:	095b      	lsrs	r3, r3, #5
 810077a:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 810077c:	4b08      	ldr	r3, [pc, #32]	; (81007a0 <ESC_Calibrate+0xe4>)
 810077e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8100780:	4613      	mov	r3, r2
 8100782:	009b      	lsls	r3, r3, #2
 8100784:	4413      	add	r3, r2
 8100786:	4a06      	ldr	r2, [pc, #24]	; (81007a0 <ESC_Calibrate+0xe4>)
 8100788:	4906      	ldr	r1, [pc, #24]	; (81007a4 <ESC_Calibrate+0xe8>)
 810078a:	fba1 1303 	umull	r1, r3, r1, r3
 810078e:	095b      	lsrs	r3, r3, #5
 8100790:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); //Led giallo
 8100792:	2201      	movs	r2, #1
 8100794:	2102      	movs	r1, #2
 8100796:	4805      	ldr	r0, [pc, #20]	; (81007ac <ESC_Calibrate+0xf0>)
 8100798:	f000 fcec 	bl	8101174 <HAL_GPIO_WritePin>
}
 810079c:	bf00      	nop
 810079e:	bd80      	pop	{r7, pc}
 81007a0:	40000400 	.word	0x40000400
 81007a4:	51eb851f 	.word	0x51eb851f
 81007a8:	58020400 	.word	0x58020400
 81007ac:	58021000 	.word	0x58021000

081007b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81007b0:	b480      	push	{r7}
 81007b2:	b083      	sub	sp, #12
 81007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81007b6:	4b0a      	ldr	r3, [pc, #40]	; (81007e0 <HAL_MspInit+0x30>)
 81007b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007bc:	4a08      	ldr	r2, [pc, #32]	; (81007e0 <HAL_MspInit+0x30>)
 81007be:	f043 0302 	orr.w	r3, r3, #2
 81007c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81007c6:	4b06      	ldr	r3, [pc, #24]	; (81007e0 <HAL_MspInit+0x30>)
 81007c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007cc:	f003 0302 	and.w	r3, r3, #2
 81007d0:	607b      	str	r3, [r7, #4]
 81007d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007d4:	bf00      	nop
 81007d6:	370c      	adds	r7, #12
 81007d8:	46bd      	mov	sp, r7
 81007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007de:	4770      	bx	lr
 81007e0:	58024400 	.word	0x58024400

081007e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81007e4:	b580      	push	{r7, lr}
 81007e6:	b084      	sub	sp, #16
 81007e8:	af00      	add	r7, sp, #0
 81007ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 81007ec:	687b      	ldr	r3, [r7, #4]
 81007ee:	681b      	ldr	r3, [r3, #0]
 81007f0:	4a19      	ldr	r2, [pc, #100]	; (8100858 <HAL_TIM_Base_MspInit+0x74>)
 81007f2:	4293      	cmp	r3, r2
 81007f4:	d117      	bne.n	8100826 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81007f6:	4b19      	ldr	r3, [pc, #100]	; (810085c <HAL_TIM_Base_MspInit+0x78>)
 81007f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81007fc:	4a17      	ldr	r2, [pc, #92]	; (810085c <HAL_TIM_Base_MspInit+0x78>)
 81007fe:	f043 0301 	orr.w	r3, r3, #1
 8100802:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100806:	4b15      	ldr	r3, [pc, #84]	; (810085c <HAL_TIM_Base_MspInit+0x78>)
 8100808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810080c:	f003 0301 	and.w	r3, r3, #1
 8100810:	60fb      	str	r3, [r7, #12]
 8100812:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8100814:	2200      	movs	r2, #0
 8100816:	2100      	movs	r1, #0
 8100818:	2019      	movs	r0, #25
 810081a:	f000 fab2 	bl	8100d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 810081e:	2019      	movs	r0, #25
 8100820:	f000 fac9 	bl	8100db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8100824:	e013      	b.n	810084e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 8100826:	687b      	ldr	r3, [r7, #4]
 8100828:	681b      	ldr	r3, [r3, #0]
 810082a:	4a0d      	ldr	r2, [pc, #52]	; (8100860 <HAL_TIM_Base_MspInit+0x7c>)
 810082c:	4293      	cmp	r3, r2
 810082e:	d10e      	bne.n	810084e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8100830:	4b0a      	ldr	r3, [pc, #40]	; (810085c <HAL_TIM_Base_MspInit+0x78>)
 8100832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100836:	4a09      	ldr	r2, [pc, #36]	; (810085c <HAL_TIM_Base_MspInit+0x78>)
 8100838:	f043 0302 	orr.w	r3, r3, #2
 810083c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100840:	4b06      	ldr	r3, [pc, #24]	; (810085c <HAL_TIM_Base_MspInit+0x78>)
 8100842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100846:	f003 0302 	and.w	r3, r3, #2
 810084a:	60bb      	str	r3, [r7, #8]
 810084c:	68bb      	ldr	r3, [r7, #8]
}
 810084e:	bf00      	nop
 8100850:	3710      	adds	r7, #16
 8100852:	46bd      	mov	sp, r7
 8100854:	bd80      	pop	{r7, pc}
 8100856:	bf00      	nop
 8100858:	40010000 	.word	0x40010000
 810085c:	58024400 	.word	0x58024400
 8100860:	40000400 	.word	0x40000400

08100864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100864:	b580      	push	{r7, lr}
 8100866:	b08a      	sub	sp, #40	; 0x28
 8100868:	af00      	add	r7, sp, #0
 810086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810086c:	f107 0314 	add.w	r3, r7, #20
 8100870:	2200      	movs	r2, #0
 8100872:	601a      	str	r2, [r3, #0]
 8100874:	605a      	str	r2, [r3, #4]
 8100876:	609a      	str	r2, [r3, #8]
 8100878:	60da      	str	r2, [r3, #12]
 810087a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	681b      	ldr	r3, [r3, #0]
 8100880:	4a32      	ldr	r2, [pc, #200]	; (810094c <HAL_TIM_MspPostInit+0xe8>)
 8100882:	4293      	cmp	r3, r2
 8100884:	d15d      	bne.n	8100942 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100886:	4b32      	ldr	r3, [pc, #200]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 8100888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810088c:	4a30      	ldr	r2, [pc, #192]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 810088e:	f043 0301 	orr.w	r3, r3, #1
 8100892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100896:	4b2e      	ldr	r3, [pc, #184]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 8100898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810089c:	f003 0301 	and.w	r3, r3, #1
 81008a0:	613b      	str	r3, [r7, #16]
 81008a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81008a4:	4b2a      	ldr	r3, [pc, #168]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 81008a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008aa:	4a29      	ldr	r2, [pc, #164]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 81008ac:	f043 0302 	orr.w	r3, r3, #2
 81008b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008b4:	4b26      	ldr	r3, [pc, #152]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 81008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ba:	f003 0302 	and.w	r3, r3, #2
 81008be:	60fb      	str	r3, [r7, #12]
 81008c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81008c2:	4b23      	ldr	r3, [pc, #140]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 81008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008c8:	4a21      	ldr	r2, [pc, #132]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 81008ca:	f043 0304 	orr.w	r3, r3, #4
 81008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008d2:	4b1f      	ldr	r3, [pc, #124]	; (8100950 <HAL_TIM_MspPostInit+0xec>)
 81008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008d8:	f003 0304 	and.w	r3, r3, #4
 81008dc:	60bb      	str	r3, [r7, #8]
 81008de:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81008e0:	2340      	movs	r3, #64	; 0x40
 81008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008e4:	2302      	movs	r3, #2
 81008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008e8:	2300      	movs	r3, #0
 81008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008ec:	2300      	movs	r3, #0
 81008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81008f0:	2302      	movs	r3, #2
 81008f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81008f4:	f107 0314 	add.w	r3, r7, #20
 81008f8:	4619      	mov	r1, r3
 81008fa:	4816      	ldr	r0, [pc, #88]	; (8100954 <HAL_TIM_MspPostInit+0xf0>)
 81008fc:	f000 fa8a 	bl	8100e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8100900:	2302      	movs	r3, #2
 8100902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100904:	2302      	movs	r3, #2
 8100906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100908:	2300      	movs	r3, #0
 810090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810090c:	2300      	movs	r3, #0
 810090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8100910:	2302      	movs	r3, #2
 8100912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100914:	f107 0314 	add.w	r3, r7, #20
 8100918:	4619      	mov	r1, r3
 810091a:	480f      	ldr	r0, [pc, #60]	; (8100958 <HAL_TIM_MspPostInit+0xf4>)
 810091c:	f000 fa7a 	bl	8100e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8100920:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8100924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100926:	2302      	movs	r3, #2
 8100928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810092a:	2300      	movs	r3, #0
 810092c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810092e:	2300      	movs	r3, #0
 8100930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8100932:	2302      	movs	r3, #2
 8100934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100936:	f107 0314 	add.w	r3, r7, #20
 810093a:	4619      	mov	r1, r3
 810093c:	4807      	ldr	r0, [pc, #28]	; (810095c <HAL_TIM_MspPostInit+0xf8>)
 810093e:	f000 fa69 	bl	8100e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8100942:	bf00      	nop
 8100944:	3728      	adds	r7, #40	; 0x28
 8100946:	46bd      	mov	sp, r7
 8100948:	bd80      	pop	{r7, pc}
 810094a:	bf00      	nop
 810094c:	40000400 	.word	0x40000400
 8100950:	58024400 	.word	0x58024400
 8100954:	58020000 	.word	0x58020000
 8100958:	58020400 	.word	0x58020400
 810095c:	58020800 	.word	0x58020800

08100960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100960:	b480      	push	{r7}
 8100962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100964:	e7fe      	b.n	8100964 <NMI_Handler+0x4>

08100966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100966:	b480      	push	{r7}
 8100968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810096a:	e7fe      	b.n	810096a <HardFault_Handler+0x4>

0810096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810096c:	b480      	push	{r7}
 810096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100970:	e7fe      	b.n	8100970 <MemManage_Handler+0x4>

08100972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100972:	b480      	push	{r7}
 8100974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100976:	e7fe      	b.n	8100976 <BusFault_Handler+0x4>

08100978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100978:	b480      	push	{r7}
 810097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810097c:	e7fe      	b.n	810097c <UsageFault_Handler+0x4>

0810097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810097e:	b480      	push	{r7}
 8100980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100982:	bf00      	nop
 8100984:	46bd      	mov	sp, r7
 8100986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810098a:	4770      	bx	lr

0810098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810098c:	b480      	push	{r7}
 810098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100990:	bf00      	nop
 8100992:	46bd      	mov	sp, r7
 8100994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100998:	4770      	bx	lr

0810099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810099a:	b480      	push	{r7}
 810099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810099e:	bf00      	nop
 81009a0:	46bd      	mov	sp, r7
 81009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009a6:	4770      	bx	lr

081009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81009a8:	b580      	push	{r7, lr}
 81009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81009ac:	f000 f8ca 	bl	8100b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81009b0:	bf00      	nop
 81009b2:	bd80      	pop	{r7, pc}

081009b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 81009b4:	b580      	push	{r7, lr}
 81009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 81009b8:	4802      	ldr	r0, [pc, #8]	; (81009c4 <TIM1_UP_IRQHandler+0x10>)
 81009ba:	f001 f841 	bl	8101a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 81009be:	bf00      	nop
 81009c0:	bd80      	pop	{r7, pc}
 81009c2:	bf00      	nop
 81009c4:	10000030 	.word	0x10000030

081009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81009cc:	f7ff fc84 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81009d0:	480c      	ldr	r0, [pc, #48]	; (8100a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81009d2:	490d      	ldr	r1, [pc, #52]	; (8100a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81009d4:	4a0d      	ldr	r2, [pc, #52]	; (8100a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81009d8:	e002      	b.n	81009e0 <LoopCopyDataInit>

081009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81009de:	3304      	adds	r3, #4

081009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81009e4:	d3f9      	bcc.n	81009da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81009e6:	4a0a      	ldr	r2, [pc, #40]	; (8100a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81009e8:	4c0a      	ldr	r4, [pc, #40]	; (8100a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 81009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 81009ec:	e001      	b.n	81009f2 <LoopFillZerobss>

081009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81009f0:	3204      	adds	r2, #4

081009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81009f4:	d3fb      	bcc.n	81009ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81009f6:	f002 f853 	bl	8102aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81009fa:	f7ff fc85 	bl	8100308 <main>
  bx  lr
 81009fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100a00:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100a04:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100a08:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8100a0c:	08102b18 	.word	0x08102b18
  ldr r2, =_sbss
 8100a10:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 8100a14:	100000cc 	.word	0x100000cc

08100a18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100a18:	e7fe      	b.n	8100a18 <ADC3_IRQHandler>
	...

08100a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100a1c:	b580      	push	{r7, lr}
 8100a1e:	b082      	sub	sp, #8
 8100a20:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100a22:	4b28      	ldr	r3, [pc, #160]	; (8100ac4 <HAL_Init+0xa8>)
 8100a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a28:	4a26      	ldr	r2, [pc, #152]	; (8100ac4 <HAL_Init+0xa8>)
 8100a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100a2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100a32:	4b24      	ldr	r3, [pc, #144]	; (8100ac4 <HAL_Init+0xa8>)
 8100a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100a3c:	603b      	str	r3, [r7, #0]
 8100a3e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100a40:	4b21      	ldr	r3, [pc, #132]	; (8100ac8 <HAL_Init+0xac>)
 8100a42:	681b      	ldr	r3, [r3, #0]
 8100a44:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100a48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100a4c:	4a1e      	ldr	r2, [pc, #120]	; (8100ac8 <HAL_Init+0xac>)
 8100a4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100a52:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100a54:	4b1c      	ldr	r3, [pc, #112]	; (8100ac8 <HAL_Init+0xac>)
 8100a56:	681b      	ldr	r3, [r3, #0]
 8100a58:	4a1b      	ldr	r2, [pc, #108]	; (8100ac8 <HAL_Init+0xac>)
 8100a5a:	f043 0301 	orr.w	r3, r3, #1
 8100a5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100a60:	2003      	movs	r0, #3
 8100a62:	f000 f983 	bl	8100d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100a66:	f000 fc39 	bl	81012dc <HAL_RCC_GetSysClockFreq>
 8100a6a:	4602      	mov	r2, r0
 8100a6c:	4b15      	ldr	r3, [pc, #84]	; (8100ac4 <HAL_Init+0xa8>)
 8100a6e:	699b      	ldr	r3, [r3, #24]
 8100a70:	0a1b      	lsrs	r3, r3, #8
 8100a72:	f003 030f 	and.w	r3, r3, #15
 8100a76:	4915      	ldr	r1, [pc, #84]	; (8100acc <HAL_Init+0xb0>)
 8100a78:	5ccb      	ldrb	r3, [r1, r3]
 8100a7a:	f003 031f 	and.w	r3, r3, #31
 8100a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8100a82:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a84:	4b0f      	ldr	r3, [pc, #60]	; (8100ac4 <HAL_Init+0xa8>)
 8100a86:	699b      	ldr	r3, [r3, #24]
 8100a88:	f003 030f 	and.w	r3, r3, #15
 8100a8c:	4a0f      	ldr	r2, [pc, #60]	; (8100acc <HAL_Init+0xb0>)
 8100a8e:	5cd3      	ldrb	r3, [r2, r3]
 8100a90:	f003 031f 	and.w	r3, r3, #31
 8100a94:	687a      	ldr	r2, [r7, #4]
 8100a96:	fa22 f303 	lsr.w	r3, r2, r3
 8100a9a:	4a0d      	ldr	r2, [pc, #52]	; (8100ad0 <HAL_Init+0xb4>)
 8100a9c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a9e:	4b0c      	ldr	r3, [pc, #48]	; (8100ad0 <HAL_Init+0xb4>)
 8100aa0:	681b      	ldr	r3, [r3, #0]
 8100aa2:	4a0c      	ldr	r2, [pc, #48]	; (8100ad4 <HAL_Init+0xb8>)
 8100aa4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100aa6:	2000      	movs	r0, #0
 8100aa8:	f000 f816 	bl	8100ad8 <HAL_InitTick>
 8100aac:	4603      	mov	r3, r0
 8100aae:	2b00      	cmp	r3, #0
 8100ab0:	d001      	beq.n	8100ab6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100ab2:	2301      	movs	r3, #1
 8100ab4:	e002      	b.n	8100abc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100ab6:	f7ff fe7b 	bl	81007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100aba:	2300      	movs	r3, #0
}
 8100abc:	4618      	mov	r0, r3
 8100abe:	3708      	adds	r7, #8
 8100ac0:	46bd      	mov	sp, r7
 8100ac2:	bd80      	pop	{r7, pc}
 8100ac4:	58024400 	.word	0x58024400
 8100ac8:	40024400 	.word	0x40024400
 8100acc:	08102b00 	.word	0x08102b00
 8100ad0:	10000004 	.word	0x10000004
 8100ad4:	10000000 	.word	0x10000000

08100ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100ad8:	b580      	push	{r7, lr}
 8100ada:	b082      	sub	sp, #8
 8100adc:	af00      	add	r7, sp, #0
 8100ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100ae0:	4b15      	ldr	r3, [pc, #84]	; (8100b38 <HAL_InitTick+0x60>)
 8100ae2:	781b      	ldrb	r3, [r3, #0]
 8100ae4:	2b00      	cmp	r3, #0
 8100ae6:	d101      	bne.n	8100aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100ae8:	2301      	movs	r3, #1
 8100aea:	e021      	b.n	8100b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100aec:	4b13      	ldr	r3, [pc, #76]	; (8100b3c <HAL_InitTick+0x64>)
 8100aee:	681a      	ldr	r2, [r3, #0]
 8100af0:	4b11      	ldr	r3, [pc, #68]	; (8100b38 <HAL_InitTick+0x60>)
 8100af2:	781b      	ldrb	r3, [r3, #0]
 8100af4:	4619      	mov	r1, r3
 8100af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8100afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8100b02:	4618      	mov	r0, r3
 8100b04:	f000 f965 	bl	8100dd2 <HAL_SYSTICK_Config>
 8100b08:	4603      	mov	r3, r0
 8100b0a:	2b00      	cmp	r3, #0
 8100b0c:	d001      	beq.n	8100b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100b0e:	2301      	movs	r3, #1
 8100b10:	e00e      	b.n	8100b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100b12:	687b      	ldr	r3, [r7, #4]
 8100b14:	2b0f      	cmp	r3, #15
 8100b16:	d80a      	bhi.n	8100b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100b18:	2200      	movs	r2, #0
 8100b1a:	6879      	ldr	r1, [r7, #4]
 8100b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8100b20:	f000 f92f 	bl	8100d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100b24:	4a06      	ldr	r2, [pc, #24]	; (8100b40 <HAL_InitTick+0x68>)
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100b2a:	2300      	movs	r3, #0
 8100b2c:	e000      	b.n	8100b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100b2e:	2301      	movs	r3, #1
}
 8100b30:	4618      	mov	r0, r3
 8100b32:	3708      	adds	r7, #8
 8100b34:	46bd      	mov	sp, r7
 8100b36:	bd80      	pop	{r7, pc}
 8100b38:	10000010 	.word	0x10000010
 8100b3c:	10000000 	.word	0x10000000
 8100b40:	1000000c 	.word	0x1000000c

08100b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100b44:	b480      	push	{r7}
 8100b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100b48:	4b06      	ldr	r3, [pc, #24]	; (8100b64 <HAL_IncTick+0x20>)
 8100b4a:	781b      	ldrb	r3, [r3, #0]
 8100b4c:	461a      	mov	r2, r3
 8100b4e:	4b06      	ldr	r3, [pc, #24]	; (8100b68 <HAL_IncTick+0x24>)
 8100b50:	681b      	ldr	r3, [r3, #0]
 8100b52:	4413      	add	r3, r2
 8100b54:	4a04      	ldr	r2, [pc, #16]	; (8100b68 <HAL_IncTick+0x24>)
 8100b56:	6013      	str	r3, [r2, #0]
}
 8100b58:	bf00      	nop
 8100b5a:	46bd      	mov	sp, r7
 8100b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b60:	4770      	bx	lr
 8100b62:	bf00      	nop
 8100b64:	10000010 	.word	0x10000010
 8100b68:	100000c8 	.word	0x100000c8

08100b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100b6c:	b480      	push	{r7}
 8100b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8100b70:	4b03      	ldr	r3, [pc, #12]	; (8100b80 <HAL_GetTick+0x14>)
 8100b72:	681b      	ldr	r3, [r3, #0]
}
 8100b74:	4618      	mov	r0, r3
 8100b76:	46bd      	mov	sp, r7
 8100b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b7c:	4770      	bx	lr
 8100b7e:	bf00      	nop
 8100b80:	100000c8 	.word	0x100000c8

08100b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100b84:	b580      	push	{r7, lr}
 8100b86:	b084      	sub	sp, #16
 8100b88:	af00      	add	r7, sp, #0
 8100b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100b8c:	f7ff ffee 	bl	8100b6c <HAL_GetTick>
 8100b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100b92:	687b      	ldr	r3, [r7, #4]
 8100b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100b96:	68fb      	ldr	r3, [r7, #12]
 8100b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100b9c:	d005      	beq.n	8100baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100b9e:	4b0a      	ldr	r3, [pc, #40]	; (8100bc8 <HAL_Delay+0x44>)
 8100ba0:	781b      	ldrb	r3, [r3, #0]
 8100ba2:	461a      	mov	r2, r3
 8100ba4:	68fb      	ldr	r3, [r7, #12]
 8100ba6:	4413      	add	r3, r2
 8100ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100baa:	bf00      	nop
 8100bac:	f7ff ffde 	bl	8100b6c <HAL_GetTick>
 8100bb0:	4602      	mov	r2, r0
 8100bb2:	68bb      	ldr	r3, [r7, #8]
 8100bb4:	1ad3      	subs	r3, r2, r3
 8100bb6:	68fa      	ldr	r2, [r7, #12]
 8100bb8:	429a      	cmp	r2, r3
 8100bba:	d8f7      	bhi.n	8100bac <HAL_Delay+0x28>
  {
  }
}
 8100bbc:	bf00      	nop
 8100bbe:	bf00      	nop
 8100bc0:	3710      	adds	r7, #16
 8100bc2:	46bd      	mov	sp, r7
 8100bc4:	bd80      	pop	{r7, pc}
 8100bc6:	bf00      	nop
 8100bc8:	10000010 	.word	0x10000010

08100bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100bcc:	b480      	push	{r7}
 8100bce:	b085      	sub	sp, #20
 8100bd0:	af00      	add	r7, sp, #0
 8100bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100bd4:	687b      	ldr	r3, [r7, #4]
 8100bd6:	f003 0307 	and.w	r3, r3, #7
 8100bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100bdc:	4b0c      	ldr	r3, [pc, #48]	; (8100c10 <__NVIC_SetPriorityGrouping+0x44>)
 8100bde:	68db      	ldr	r3, [r3, #12]
 8100be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100be2:	68ba      	ldr	r2, [r7, #8]
 8100be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100be8:	4013      	ands	r3, r2
 8100bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100bec:	68fb      	ldr	r3, [r7, #12]
 8100bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100bf0:	68bb      	ldr	r3, [r7, #8]
 8100bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100bfe:	4a04      	ldr	r2, [pc, #16]	; (8100c10 <__NVIC_SetPriorityGrouping+0x44>)
 8100c00:	68bb      	ldr	r3, [r7, #8]
 8100c02:	60d3      	str	r3, [r2, #12]
}
 8100c04:	bf00      	nop
 8100c06:	3714      	adds	r7, #20
 8100c08:	46bd      	mov	sp, r7
 8100c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c0e:	4770      	bx	lr
 8100c10:	e000ed00 	.word	0xe000ed00

08100c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100c14:	b480      	push	{r7}
 8100c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100c18:	4b04      	ldr	r3, [pc, #16]	; (8100c2c <__NVIC_GetPriorityGrouping+0x18>)
 8100c1a:	68db      	ldr	r3, [r3, #12]
 8100c1c:	0a1b      	lsrs	r3, r3, #8
 8100c1e:	f003 0307 	and.w	r3, r3, #7
}
 8100c22:	4618      	mov	r0, r3
 8100c24:	46bd      	mov	sp, r7
 8100c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c2a:	4770      	bx	lr
 8100c2c:	e000ed00 	.word	0xe000ed00

08100c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100c30:	b480      	push	{r7}
 8100c32:	b083      	sub	sp, #12
 8100c34:	af00      	add	r7, sp, #0
 8100c36:	4603      	mov	r3, r0
 8100c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c3e:	2b00      	cmp	r3, #0
 8100c40:	db0b      	blt.n	8100c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100c42:	88fb      	ldrh	r3, [r7, #6]
 8100c44:	f003 021f 	and.w	r2, r3, #31
 8100c48:	4907      	ldr	r1, [pc, #28]	; (8100c68 <__NVIC_EnableIRQ+0x38>)
 8100c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c4e:	095b      	lsrs	r3, r3, #5
 8100c50:	2001      	movs	r0, #1
 8100c52:	fa00 f202 	lsl.w	r2, r0, r2
 8100c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100c5a:	bf00      	nop
 8100c5c:	370c      	adds	r7, #12
 8100c5e:	46bd      	mov	sp, r7
 8100c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c64:	4770      	bx	lr
 8100c66:	bf00      	nop
 8100c68:	e000e100 	.word	0xe000e100

08100c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100c6c:	b480      	push	{r7}
 8100c6e:	b083      	sub	sp, #12
 8100c70:	af00      	add	r7, sp, #0
 8100c72:	4603      	mov	r3, r0
 8100c74:	6039      	str	r1, [r7, #0]
 8100c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c7c:	2b00      	cmp	r3, #0
 8100c7e:	db0a      	blt.n	8100c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100c80:	683b      	ldr	r3, [r7, #0]
 8100c82:	b2da      	uxtb	r2, r3
 8100c84:	490c      	ldr	r1, [pc, #48]	; (8100cb8 <__NVIC_SetPriority+0x4c>)
 8100c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c8a:	0112      	lsls	r2, r2, #4
 8100c8c:	b2d2      	uxtb	r2, r2
 8100c8e:	440b      	add	r3, r1
 8100c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100c94:	e00a      	b.n	8100cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100c96:	683b      	ldr	r3, [r7, #0]
 8100c98:	b2da      	uxtb	r2, r3
 8100c9a:	4908      	ldr	r1, [pc, #32]	; (8100cbc <__NVIC_SetPriority+0x50>)
 8100c9c:	88fb      	ldrh	r3, [r7, #6]
 8100c9e:	f003 030f 	and.w	r3, r3, #15
 8100ca2:	3b04      	subs	r3, #4
 8100ca4:	0112      	lsls	r2, r2, #4
 8100ca6:	b2d2      	uxtb	r2, r2
 8100ca8:	440b      	add	r3, r1
 8100caa:	761a      	strb	r2, [r3, #24]
}
 8100cac:	bf00      	nop
 8100cae:	370c      	adds	r7, #12
 8100cb0:	46bd      	mov	sp, r7
 8100cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cb6:	4770      	bx	lr
 8100cb8:	e000e100 	.word	0xe000e100
 8100cbc:	e000ed00 	.word	0xe000ed00

08100cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100cc0:	b480      	push	{r7}
 8100cc2:	b089      	sub	sp, #36	; 0x24
 8100cc4:	af00      	add	r7, sp, #0
 8100cc6:	60f8      	str	r0, [r7, #12]
 8100cc8:	60b9      	str	r1, [r7, #8]
 8100cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100ccc:	68fb      	ldr	r3, [r7, #12]
 8100cce:	f003 0307 	and.w	r3, r3, #7
 8100cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100cd4:	69fb      	ldr	r3, [r7, #28]
 8100cd6:	f1c3 0307 	rsb	r3, r3, #7
 8100cda:	2b04      	cmp	r3, #4
 8100cdc:	bf28      	it	cs
 8100cde:	2304      	movcs	r3, #4
 8100ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100ce2:	69fb      	ldr	r3, [r7, #28]
 8100ce4:	3304      	adds	r3, #4
 8100ce6:	2b06      	cmp	r3, #6
 8100ce8:	d902      	bls.n	8100cf0 <NVIC_EncodePriority+0x30>
 8100cea:	69fb      	ldr	r3, [r7, #28]
 8100cec:	3b03      	subs	r3, #3
 8100cee:	e000      	b.n	8100cf2 <NVIC_EncodePriority+0x32>
 8100cf0:	2300      	movs	r3, #0
 8100cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8100cf8:	69bb      	ldr	r3, [r7, #24]
 8100cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8100cfe:	43da      	mvns	r2, r3
 8100d00:	68bb      	ldr	r3, [r7, #8]
 8100d02:	401a      	ands	r2, r3
 8100d04:	697b      	ldr	r3, [r7, #20]
 8100d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100d08:	f04f 31ff 	mov.w	r1, #4294967295
 8100d0c:	697b      	ldr	r3, [r7, #20]
 8100d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8100d12:	43d9      	mvns	r1, r3
 8100d14:	687b      	ldr	r3, [r7, #4]
 8100d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100d18:	4313      	orrs	r3, r2
         );
}
 8100d1a:	4618      	mov	r0, r3
 8100d1c:	3724      	adds	r7, #36	; 0x24
 8100d1e:	46bd      	mov	sp, r7
 8100d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d24:	4770      	bx	lr
	...

08100d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100d28:	b580      	push	{r7, lr}
 8100d2a:	b082      	sub	sp, #8
 8100d2c:	af00      	add	r7, sp, #0
 8100d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100d30:	687b      	ldr	r3, [r7, #4]
 8100d32:	3b01      	subs	r3, #1
 8100d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100d38:	d301      	bcc.n	8100d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100d3a:	2301      	movs	r3, #1
 8100d3c:	e00f      	b.n	8100d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100d3e:	4a0a      	ldr	r2, [pc, #40]	; (8100d68 <SysTick_Config+0x40>)
 8100d40:	687b      	ldr	r3, [r7, #4]
 8100d42:	3b01      	subs	r3, #1
 8100d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100d46:	210f      	movs	r1, #15
 8100d48:	f04f 30ff 	mov.w	r0, #4294967295
 8100d4c:	f7ff ff8e 	bl	8100c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100d50:	4b05      	ldr	r3, [pc, #20]	; (8100d68 <SysTick_Config+0x40>)
 8100d52:	2200      	movs	r2, #0
 8100d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100d56:	4b04      	ldr	r3, [pc, #16]	; (8100d68 <SysTick_Config+0x40>)
 8100d58:	2207      	movs	r2, #7
 8100d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100d5c:	2300      	movs	r3, #0
}
 8100d5e:	4618      	mov	r0, r3
 8100d60:	3708      	adds	r7, #8
 8100d62:	46bd      	mov	sp, r7
 8100d64:	bd80      	pop	{r7, pc}
 8100d66:	bf00      	nop
 8100d68:	e000e010 	.word	0xe000e010

08100d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100d6c:	b580      	push	{r7, lr}
 8100d6e:	b082      	sub	sp, #8
 8100d70:	af00      	add	r7, sp, #0
 8100d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100d74:	6878      	ldr	r0, [r7, #4]
 8100d76:	f7ff ff29 	bl	8100bcc <__NVIC_SetPriorityGrouping>
}
 8100d7a:	bf00      	nop
 8100d7c:	3708      	adds	r7, #8
 8100d7e:	46bd      	mov	sp, r7
 8100d80:	bd80      	pop	{r7, pc}

08100d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100d82:	b580      	push	{r7, lr}
 8100d84:	b086      	sub	sp, #24
 8100d86:	af00      	add	r7, sp, #0
 8100d88:	4603      	mov	r3, r0
 8100d8a:	60b9      	str	r1, [r7, #8]
 8100d8c:	607a      	str	r2, [r7, #4]
 8100d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100d90:	f7ff ff40 	bl	8100c14 <__NVIC_GetPriorityGrouping>
 8100d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100d96:	687a      	ldr	r2, [r7, #4]
 8100d98:	68b9      	ldr	r1, [r7, #8]
 8100d9a:	6978      	ldr	r0, [r7, #20]
 8100d9c:	f7ff ff90 	bl	8100cc0 <NVIC_EncodePriority>
 8100da0:	4602      	mov	r2, r0
 8100da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100da6:	4611      	mov	r1, r2
 8100da8:	4618      	mov	r0, r3
 8100daa:	f7ff ff5f 	bl	8100c6c <__NVIC_SetPriority>
}
 8100dae:	bf00      	nop
 8100db0:	3718      	adds	r7, #24
 8100db2:	46bd      	mov	sp, r7
 8100db4:	bd80      	pop	{r7, pc}

08100db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100db6:	b580      	push	{r7, lr}
 8100db8:	b082      	sub	sp, #8
 8100dba:	af00      	add	r7, sp, #0
 8100dbc:	4603      	mov	r3, r0
 8100dbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100dc4:	4618      	mov	r0, r3
 8100dc6:	f7ff ff33 	bl	8100c30 <__NVIC_EnableIRQ>
}
 8100dca:	bf00      	nop
 8100dcc:	3708      	adds	r7, #8
 8100dce:	46bd      	mov	sp, r7
 8100dd0:	bd80      	pop	{r7, pc}

08100dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100dd2:	b580      	push	{r7, lr}
 8100dd4:	b082      	sub	sp, #8
 8100dd6:	af00      	add	r7, sp, #0
 8100dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100dda:	6878      	ldr	r0, [r7, #4]
 8100ddc:	f7ff ffa4 	bl	8100d28 <SysTick_Config>
 8100de0:	4603      	mov	r3, r0
}
 8100de2:	4618      	mov	r0, r3
 8100de4:	3708      	adds	r7, #8
 8100de6:	46bd      	mov	sp, r7
 8100de8:	bd80      	pop	{r7, pc}
	...

08100dec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100dec:	b480      	push	{r7}
 8100dee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100df0:	4b07      	ldr	r3, [pc, #28]	; (8100e10 <HAL_GetCurrentCPUID+0x24>)
 8100df2:	681b      	ldr	r3, [r3, #0]
 8100df4:	091b      	lsrs	r3, r3, #4
 8100df6:	f003 030f 	and.w	r3, r3, #15
 8100dfa:	2b07      	cmp	r3, #7
 8100dfc:	d101      	bne.n	8100e02 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100dfe:	2303      	movs	r3, #3
 8100e00:	e000      	b.n	8100e04 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100e02:	2301      	movs	r3, #1
  }
}
 8100e04:	4618      	mov	r0, r3
 8100e06:	46bd      	mov	sp, r7
 8100e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e0c:	4770      	bx	lr
 8100e0e:	bf00      	nop
 8100e10:	e000ed00 	.word	0xe000ed00

08100e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100e14:	b480      	push	{r7}
 8100e16:	b089      	sub	sp, #36	; 0x24
 8100e18:	af00      	add	r7, sp, #0
 8100e1a:	6078      	str	r0, [r7, #4]
 8100e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100e1e:	2300      	movs	r3, #0
 8100e20:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100e22:	4b89      	ldr	r3, [pc, #548]	; (8101048 <HAL_GPIO_Init+0x234>)
 8100e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100e26:	e194      	b.n	8101152 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100e28:	683b      	ldr	r3, [r7, #0]
 8100e2a:	681a      	ldr	r2, [r3, #0]
 8100e2c:	2101      	movs	r1, #1
 8100e2e:	69fb      	ldr	r3, [r7, #28]
 8100e30:	fa01 f303 	lsl.w	r3, r1, r3
 8100e34:	4013      	ands	r3, r2
 8100e36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100e38:	693b      	ldr	r3, [r7, #16]
 8100e3a:	2b00      	cmp	r3, #0
 8100e3c:	f000 8186 	beq.w	810114c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100e40:	683b      	ldr	r3, [r7, #0]
 8100e42:	685b      	ldr	r3, [r3, #4]
 8100e44:	f003 0303 	and.w	r3, r3, #3
 8100e48:	2b01      	cmp	r3, #1
 8100e4a:	d005      	beq.n	8100e58 <HAL_GPIO_Init+0x44>
 8100e4c:	683b      	ldr	r3, [r7, #0]
 8100e4e:	685b      	ldr	r3, [r3, #4]
 8100e50:	f003 0303 	and.w	r3, r3, #3
 8100e54:	2b02      	cmp	r3, #2
 8100e56:	d130      	bne.n	8100eba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100e58:	687b      	ldr	r3, [r7, #4]
 8100e5a:	689b      	ldr	r3, [r3, #8]
 8100e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100e5e:	69fb      	ldr	r3, [r7, #28]
 8100e60:	005b      	lsls	r3, r3, #1
 8100e62:	2203      	movs	r2, #3
 8100e64:	fa02 f303 	lsl.w	r3, r2, r3
 8100e68:	43db      	mvns	r3, r3
 8100e6a:	69ba      	ldr	r2, [r7, #24]
 8100e6c:	4013      	ands	r3, r2
 8100e6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100e70:	683b      	ldr	r3, [r7, #0]
 8100e72:	68da      	ldr	r2, [r3, #12]
 8100e74:	69fb      	ldr	r3, [r7, #28]
 8100e76:	005b      	lsls	r3, r3, #1
 8100e78:	fa02 f303 	lsl.w	r3, r2, r3
 8100e7c:	69ba      	ldr	r2, [r7, #24]
 8100e7e:	4313      	orrs	r3, r2
 8100e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100e82:	687b      	ldr	r3, [r7, #4]
 8100e84:	69ba      	ldr	r2, [r7, #24]
 8100e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100e88:	687b      	ldr	r3, [r7, #4]
 8100e8a:	685b      	ldr	r3, [r3, #4]
 8100e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100e8e:	2201      	movs	r2, #1
 8100e90:	69fb      	ldr	r3, [r7, #28]
 8100e92:	fa02 f303 	lsl.w	r3, r2, r3
 8100e96:	43db      	mvns	r3, r3
 8100e98:	69ba      	ldr	r2, [r7, #24]
 8100e9a:	4013      	ands	r3, r2
 8100e9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100e9e:	683b      	ldr	r3, [r7, #0]
 8100ea0:	685b      	ldr	r3, [r3, #4]
 8100ea2:	091b      	lsrs	r3, r3, #4
 8100ea4:	f003 0201 	and.w	r2, r3, #1
 8100ea8:	69fb      	ldr	r3, [r7, #28]
 8100eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8100eae:	69ba      	ldr	r2, [r7, #24]
 8100eb0:	4313      	orrs	r3, r2
 8100eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100eb4:	687b      	ldr	r3, [r7, #4]
 8100eb6:	69ba      	ldr	r2, [r7, #24]
 8100eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100eba:	683b      	ldr	r3, [r7, #0]
 8100ebc:	685b      	ldr	r3, [r3, #4]
 8100ebe:	f003 0303 	and.w	r3, r3, #3
 8100ec2:	2b03      	cmp	r3, #3
 8100ec4:	d017      	beq.n	8100ef6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100ec6:	687b      	ldr	r3, [r7, #4]
 8100ec8:	68db      	ldr	r3, [r3, #12]
 8100eca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100ecc:	69fb      	ldr	r3, [r7, #28]
 8100ece:	005b      	lsls	r3, r3, #1
 8100ed0:	2203      	movs	r2, #3
 8100ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8100ed6:	43db      	mvns	r3, r3
 8100ed8:	69ba      	ldr	r2, [r7, #24]
 8100eda:	4013      	ands	r3, r2
 8100edc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100ede:	683b      	ldr	r3, [r7, #0]
 8100ee0:	689a      	ldr	r2, [r3, #8]
 8100ee2:	69fb      	ldr	r3, [r7, #28]
 8100ee4:	005b      	lsls	r3, r3, #1
 8100ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eea:	69ba      	ldr	r2, [r7, #24]
 8100eec:	4313      	orrs	r3, r2
 8100eee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	69ba      	ldr	r2, [r7, #24]
 8100ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100ef6:	683b      	ldr	r3, [r7, #0]
 8100ef8:	685b      	ldr	r3, [r3, #4]
 8100efa:	f003 0303 	and.w	r3, r3, #3
 8100efe:	2b02      	cmp	r3, #2
 8100f00:	d123      	bne.n	8100f4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100f02:	69fb      	ldr	r3, [r7, #28]
 8100f04:	08da      	lsrs	r2, r3, #3
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	3208      	adds	r2, #8
 8100f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100f10:	69fb      	ldr	r3, [r7, #28]
 8100f12:	f003 0307 	and.w	r3, r3, #7
 8100f16:	009b      	lsls	r3, r3, #2
 8100f18:	220f      	movs	r2, #15
 8100f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f1e:	43db      	mvns	r3, r3
 8100f20:	69ba      	ldr	r2, [r7, #24]
 8100f22:	4013      	ands	r3, r2
 8100f24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100f26:	683b      	ldr	r3, [r7, #0]
 8100f28:	691a      	ldr	r2, [r3, #16]
 8100f2a:	69fb      	ldr	r3, [r7, #28]
 8100f2c:	f003 0307 	and.w	r3, r3, #7
 8100f30:	009b      	lsls	r3, r3, #2
 8100f32:	fa02 f303 	lsl.w	r3, r2, r3
 8100f36:	69ba      	ldr	r2, [r7, #24]
 8100f38:	4313      	orrs	r3, r2
 8100f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100f3c:	69fb      	ldr	r3, [r7, #28]
 8100f3e:	08da      	lsrs	r2, r3, #3
 8100f40:	687b      	ldr	r3, [r7, #4]
 8100f42:	3208      	adds	r2, #8
 8100f44:	69b9      	ldr	r1, [r7, #24]
 8100f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100f4a:	687b      	ldr	r3, [r7, #4]
 8100f4c:	681b      	ldr	r3, [r3, #0]
 8100f4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100f50:	69fb      	ldr	r3, [r7, #28]
 8100f52:	005b      	lsls	r3, r3, #1
 8100f54:	2203      	movs	r2, #3
 8100f56:	fa02 f303 	lsl.w	r3, r2, r3
 8100f5a:	43db      	mvns	r3, r3
 8100f5c:	69ba      	ldr	r2, [r7, #24]
 8100f5e:	4013      	ands	r3, r2
 8100f60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100f62:	683b      	ldr	r3, [r7, #0]
 8100f64:	685b      	ldr	r3, [r3, #4]
 8100f66:	f003 0203 	and.w	r2, r3, #3
 8100f6a:	69fb      	ldr	r3, [r7, #28]
 8100f6c:	005b      	lsls	r3, r3, #1
 8100f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100f72:	69ba      	ldr	r2, [r7, #24]
 8100f74:	4313      	orrs	r3, r2
 8100f76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100f78:	687b      	ldr	r3, [r7, #4]
 8100f7a:	69ba      	ldr	r2, [r7, #24]
 8100f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100f7e:	683b      	ldr	r3, [r7, #0]
 8100f80:	685b      	ldr	r3, [r3, #4]
 8100f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100f86:	2b00      	cmp	r3, #0
 8100f88:	f000 80e0 	beq.w	810114c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f8c:	4b2f      	ldr	r3, [pc, #188]	; (810104c <HAL_GPIO_Init+0x238>)
 8100f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100f92:	4a2e      	ldr	r2, [pc, #184]	; (810104c <HAL_GPIO_Init+0x238>)
 8100f94:	f043 0302 	orr.w	r3, r3, #2
 8100f98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100f9c:	4b2b      	ldr	r3, [pc, #172]	; (810104c <HAL_GPIO_Init+0x238>)
 8100f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100fa2:	f003 0302 	and.w	r3, r3, #2
 8100fa6:	60fb      	str	r3, [r7, #12]
 8100fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100faa:	4a29      	ldr	r2, [pc, #164]	; (8101050 <HAL_GPIO_Init+0x23c>)
 8100fac:	69fb      	ldr	r3, [r7, #28]
 8100fae:	089b      	lsrs	r3, r3, #2
 8100fb0:	3302      	adds	r3, #2
 8100fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100fb8:	69fb      	ldr	r3, [r7, #28]
 8100fba:	f003 0303 	and.w	r3, r3, #3
 8100fbe:	009b      	lsls	r3, r3, #2
 8100fc0:	220f      	movs	r2, #15
 8100fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8100fc6:	43db      	mvns	r3, r3
 8100fc8:	69ba      	ldr	r2, [r7, #24]
 8100fca:	4013      	ands	r3, r2
 8100fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100fce:	687b      	ldr	r3, [r7, #4]
 8100fd0:	4a20      	ldr	r2, [pc, #128]	; (8101054 <HAL_GPIO_Init+0x240>)
 8100fd2:	4293      	cmp	r3, r2
 8100fd4:	d052      	beq.n	810107c <HAL_GPIO_Init+0x268>
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	4a1f      	ldr	r2, [pc, #124]	; (8101058 <HAL_GPIO_Init+0x244>)
 8100fda:	4293      	cmp	r3, r2
 8100fdc:	d031      	beq.n	8101042 <HAL_GPIO_Init+0x22e>
 8100fde:	687b      	ldr	r3, [r7, #4]
 8100fe0:	4a1e      	ldr	r2, [pc, #120]	; (810105c <HAL_GPIO_Init+0x248>)
 8100fe2:	4293      	cmp	r3, r2
 8100fe4:	d02b      	beq.n	810103e <HAL_GPIO_Init+0x22a>
 8100fe6:	687b      	ldr	r3, [r7, #4]
 8100fe8:	4a1d      	ldr	r2, [pc, #116]	; (8101060 <HAL_GPIO_Init+0x24c>)
 8100fea:	4293      	cmp	r3, r2
 8100fec:	d025      	beq.n	810103a <HAL_GPIO_Init+0x226>
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	4a1c      	ldr	r2, [pc, #112]	; (8101064 <HAL_GPIO_Init+0x250>)
 8100ff2:	4293      	cmp	r3, r2
 8100ff4:	d01f      	beq.n	8101036 <HAL_GPIO_Init+0x222>
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	4a1b      	ldr	r2, [pc, #108]	; (8101068 <HAL_GPIO_Init+0x254>)
 8100ffa:	4293      	cmp	r3, r2
 8100ffc:	d019      	beq.n	8101032 <HAL_GPIO_Init+0x21e>
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	4a1a      	ldr	r2, [pc, #104]	; (810106c <HAL_GPIO_Init+0x258>)
 8101002:	4293      	cmp	r3, r2
 8101004:	d013      	beq.n	810102e <HAL_GPIO_Init+0x21a>
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	4a19      	ldr	r2, [pc, #100]	; (8101070 <HAL_GPIO_Init+0x25c>)
 810100a:	4293      	cmp	r3, r2
 810100c:	d00d      	beq.n	810102a <HAL_GPIO_Init+0x216>
 810100e:	687b      	ldr	r3, [r7, #4]
 8101010:	4a18      	ldr	r2, [pc, #96]	; (8101074 <HAL_GPIO_Init+0x260>)
 8101012:	4293      	cmp	r3, r2
 8101014:	d007      	beq.n	8101026 <HAL_GPIO_Init+0x212>
 8101016:	687b      	ldr	r3, [r7, #4]
 8101018:	4a17      	ldr	r2, [pc, #92]	; (8101078 <HAL_GPIO_Init+0x264>)
 810101a:	4293      	cmp	r3, r2
 810101c:	d101      	bne.n	8101022 <HAL_GPIO_Init+0x20e>
 810101e:	2309      	movs	r3, #9
 8101020:	e02d      	b.n	810107e <HAL_GPIO_Init+0x26a>
 8101022:	230a      	movs	r3, #10
 8101024:	e02b      	b.n	810107e <HAL_GPIO_Init+0x26a>
 8101026:	2308      	movs	r3, #8
 8101028:	e029      	b.n	810107e <HAL_GPIO_Init+0x26a>
 810102a:	2307      	movs	r3, #7
 810102c:	e027      	b.n	810107e <HAL_GPIO_Init+0x26a>
 810102e:	2306      	movs	r3, #6
 8101030:	e025      	b.n	810107e <HAL_GPIO_Init+0x26a>
 8101032:	2305      	movs	r3, #5
 8101034:	e023      	b.n	810107e <HAL_GPIO_Init+0x26a>
 8101036:	2304      	movs	r3, #4
 8101038:	e021      	b.n	810107e <HAL_GPIO_Init+0x26a>
 810103a:	2303      	movs	r3, #3
 810103c:	e01f      	b.n	810107e <HAL_GPIO_Init+0x26a>
 810103e:	2302      	movs	r3, #2
 8101040:	e01d      	b.n	810107e <HAL_GPIO_Init+0x26a>
 8101042:	2301      	movs	r3, #1
 8101044:	e01b      	b.n	810107e <HAL_GPIO_Init+0x26a>
 8101046:	bf00      	nop
 8101048:	580000c0 	.word	0x580000c0
 810104c:	58024400 	.word	0x58024400
 8101050:	58000400 	.word	0x58000400
 8101054:	58020000 	.word	0x58020000
 8101058:	58020400 	.word	0x58020400
 810105c:	58020800 	.word	0x58020800
 8101060:	58020c00 	.word	0x58020c00
 8101064:	58021000 	.word	0x58021000
 8101068:	58021400 	.word	0x58021400
 810106c:	58021800 	.word	0x58021800
 8101070:	58021c00 	.word	0x58021c00
 8101074:	58022000 	.word	0x58022000
 8101078:	58022400 	.word	0x58022400
 810107c:	2300      	movs	r3, #0
 810107e:	69fa      	ldr	r2, [r7, #28]
 8101080:	f002 0203 	and.w	r2, r2, #3
 8101084:	0092      	lsls	r2, r2, #2
 8101086:	4093      	lsls	r3, r2
 8101088:	69ba      	ldr	r2, [r7, #24]
 810108a:	4313      	orrs	r3, r2
 810108c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810108e:	4938      	ldr	r1, [pc, #224]	; (8101170 <HAL_GPIO_Init+0x35c>)
 8101090:	69fb      	ldr	r3, [r7, #28]
 8101092:	089b      	lsrs	r3, r3, #2
 8101094:	3302      	adds	r3, #2
 8101096:	69ba      	ldr	r2, [r7, #24]
 8101098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81010a0:	681b      	ldr	r3, [r3, #0]
 81010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010a4:	693b      	ldr	r3, [r7, #16]
 81010a6:	43db      	mvns	r3, r3
 81010a8:	69ba      	ldr	r2, [r7, #24]
 81010aa:	4013      	ands	r3, r2
 81010ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81010ae:	683b      	ldr	r3, [r7, #0]
 81010b0:	685b      	ldr	r3, [r3, #4]
 81010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81010b6:	2b00      	cmp	r3, #0
 81010b8:	d003      	beq.n	81010c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81010ba:	69ba      	ldr	r2, [r7, #24]
 81010bc:	693b      	ldr	r3, [r7, #16]
 81010be:	4313      	orrs	r3, r2
 81010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81010c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81010c6:	69bb      	ldr	r3, [r7, #24]
 81010c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81010ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81010ce:	685b      	ldr	r3, [r3, #4]
 81010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010d2:	693b      	ldr	r3, [r7, #16]
 81010d4:	43db      	mvns	r3, r3
 81010d6:	69ba      	ldr	r2, [r7, #24]
 81010d8:	4013      	ands	r3, r2
 81010da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81010dc:	683b      	ldr	r3, [r7, #0]
 81010de:	685b      	ldr	r3, [r3, #4]
 81010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81010e4:	2b00      	cmp	r3, #0
 81010e6:	d003      	beq.n	81010f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81010e8:	69ba      	ldr	r2, [r7, #24]
 81010ea:	693b      	ldr	r3, [r7, #16]
 81010ec:	4313      	orrs	r3, r2
 81010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81010f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81010f4:	69bb      	ldr	r3, [r7, #24]
 81010f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81010f8:	697b      	ldr	r3, [r7, #20]
 81010fa:	685b      	ldr	r3, [r3, #4]
 81010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010fe:	693b      	ldr	r3, [r7, #16]
 8101100:	43db      	mvns	r3, r3
 8101102:	69ba      	ldr	r2, [r7, #24]
 8101104:	4013      	ands	r3, r2
 8101106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101108:	683b      	ldr	r3, [r7, #0]
 810110a:	685b      	ldr	r3, [r3, #4]
 810110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101110:	2b00      	cmp	r3, #0
 8101112:	d003      	beq.n	810111c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101114:	69ba      	ldr	r2, [r7, #24]
 8101116:	693b      	ldr	r3, [r7, #16]
 8101118:	4313      	orrs	r3, r2
 810111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810111c:	697b      	ldr	r3, [r7, #20]
 810111e:	69ba      	ldr	r2, [r7, #24]
 8101120:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101122:	697b      	ldr	r3, [r7, #20]
 8101124:	681b      	ldr	r3, [r3, #0]
 8101126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101128:	693b      	ldr	r3, [r7, #16]
 810112a:	43db      	mvns	r3, r3
 810112c:	69ba      	ldr	r2, [r7, #24]
 810112e:	4013      	ands	r3, r2
 8101130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101132:	683b      	ldr	r3, [r7, #0]
 8101134:	685b      	ldr	r3, [r3, #4]
 8101136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810113a:	2b00      	cmp	r3, #0
 810113c:	d003      	beq.n	8101146 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810113e:	69ba      	ldr	r2, [r7, #24]
 8101140:	693b      	ldr	r3, [r7, #16]
 8101142:	4313      	orrs	r3, r2
 8101144:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101146:	697b      	ldr	r3, [r7, #20]
 8101148:	69ba      	ldr	r2, [r7, #24]
 810114a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810114c:	69fb      	ldr	r3, [r7, #28]
 810114e:	3301      	adds	r3, #1
 8101150:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101152:	683b      	ldr	r3, [r7, #0]
 8101154:	681a      	ldr	r2, [r3, #0]
 8101156:	69fb      	ldr	r3, [r7, #28]
 8101158:	fa22 f303 	lsr.w	r3, r2, r3
 810115c:	2b00      	cmp	r3, #0
 810115e:	f47f ae63 	bne.w	8100e28 <HAL_GPIO_Init+0x14>
  }
}
 8101162:	bf00      	nop
 8101164:	bf00      	nop
 8101166:	3724      	adds	r7, #36	; 0x24
 8101168:	46bd      	mov	sp, r7
 810116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810116e:	4770      	bx	lr
 8101170:	58000400 	.word	0x58000400

08101174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101174:	b480      	push	{r7}
 8101176:	b083      	sub	sp, #12
 8101178:	af00      	add	r7, sp, #0
 810117a:	6078      	str	r0, [r7, #4]
 810117c:	460b      	mov	r3, r1
 810117e:	807b      	strh	r3, [r7, #2]
 8101180:	4613      	mov	r3, r2
 8101182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101184:	787b      	ldrb	r3, [r7, #1]
 8101186:	2b00      	cmp	r3, #0
 8101188:	d003      	beq.n	8101192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810118a:	887a      	ldrh	r2, [r7, #2]
 810118c:	687b      	ldr	r3, [r7, #4]
 810118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101190:	e003      	b.n	810119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101192:	887b      	ldrh	r3, [r7, #2]
 8101194:	041a      	lsls	r2, r3, #16
 8101196:	687b      	ldr	r3, [r7, #4]
 8101198:	619a      	str	r2, [r3, #24]
}
 810119a:	bf00      	nop
 810119c:	370c      	adds	r7, #12
 810119e:	46bd      	mov	sp, r7
 81011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011a4:	4770      	bx	lr
	...

081011a8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81011a8:	b480      	push	{r7}
 81011aa:	b083      	sub	sp, #12
 81011ac:	af00      	add	r7, sp, #0
 81011ae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81011b0:	4b05      	ldr	r3, [pc, #20]	; (81011c8 <HAL_HSEM_ActivateNotification+0x20>)
 81011b2:	681a      	ldr	r2, [r3, #0]
 81011b4:	4904      	ldr	r1, [pc, #16]	; (81011c8 <HAL_HSEM_ActivateNotification+0x20>)
 81011b6:	687b      	ldr	r3, [r7, #4]
 81011b8:	4313      	orrs	r3, r2
 81011ba:	600b      	str	r3, [r1, #0]
#endif
}
 81011bc:	bf00      	nop
 81011be:	370c      	adds	r7, #12
 81011c0:	46bd      	mov	sp, r7
 81011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011c6:	4770      	bx	lr
 81011c8:	58026510 	.word	0x58026510

081011cc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81011cc:	b580      	push	{r7, lr}
 81011ce:	b084      	sub	sp, #16
 81011d0:	af00      	add	r7, sp, #0
 81011d2:	60f8      	str	r0, [r7, #12]
 81011d4:	460b      	mov	r3, r1
 81011d6:	607a      	str	r2, [r7, #4]
 81011d8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81011da:	4b37      	ldr	r3, [pc, #220]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011dc:	681b      	ldr	r3, [r3, #0]
 81011de:	f023 0201 	bic.w	r2, r3, #1
 81011e2:	4935      	ldr	r1, [pc, #212]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011e4:	68fb      	ldr	r3, [r7, #12]
 81011e6:	4313      	orrs	r3, r2
 81011e8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	2b00      	cmp	r3, #0
 81011ee:	d123      	bne.n	8101238 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81011f0:	f7ff fdfc 	bl	8100dec <HAL_GetCurrentCPUID>
 81011f4:	4603      	mov	r3, r0
 81011f6:	2b03      	cmp	r3, #3
 81011f8:	d158      	bne.n	81012ac <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81011fa:	4b2f      	ldr	r3, [pc, #188]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011fc:	691b      	ldr	r3, [r3, #16]
 81011fe:	4a2e      	ldr	r2, [pc, #184]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101200:	f023 0301 	bic.w	r3, r3, #1
 8101204:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101206:	4b2d      	ldr	r3, [pc, #180]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101208:	691b      	ldr	r3, [r3, #16]
 810120a:	4a2c      	ldr	r2, [pc, #176]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810120c:	f043 0304 	orr.w	r3, r3, #4
 8101210:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101212:	f3bf 8f4f 	dsb	sy
}
 8101216:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101218:	f3bf 8f6f 	isb	sy
}
 810121c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810121e:	7afb      	ldrb	r3, [r7, #11]
 8101220:	2b01      	cmp	r3, #1
 8101222:	d101      	bne.n	8101228 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101224:	bf30      	wfi
 8101226:	e000      	b.n	810122a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101228:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810122a:	4b24      	ldr	r3, [pc, #144]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810122c:	691b      	ldr	r3, [r3, #16]
 810122e:	4a23      	ldr	r2, [pc, #140]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101230:	f023 0304 	bic.w	r3, r3, #4
 8101234:	6113      	str	r3, [r2, #16]
 8101236:	e03c      	b.n	81012b2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101238:	687b      	ldr	r3, [r7, #4]
 810123a:	2b01      	cmp	r3, #1
 810123c:	d123      	bne.n	8101286 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810123e:	f7ff fdd5 	bl	8100dec <HAL_GetCurrentCPUID>
 8101242:	4603      	mov	r3, r0
 8101244:	2b01      	cmp	r3, #1
 8101246:	d133      	bne.n	81012b0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101248:	4b1b      	ldr	r3, [pc, #108]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810124a:	695b      	ldr	r3, [r3, #20]
 810124c:	4a1a      	ldr	r2, [pc, #104]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810124e:	f023 0302 	bic.w	r3, r3, #2
 8101252:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101254:	4b19      	ldr	r3, [pc, #100]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101256:	691b      	ldr	r3, [r3, #16]
 8101258:	4a18      	ldr	r2, [pc, #96]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810125a:	f043 0304 	orr.w	r3, r3, #4
 810125e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101260:	f3bf 8f4f 	dsb	sy
}
 8101264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101266:	f3bf 8f6f 	isb	sy
}
 810126a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810126c:	7afb      	ldrb	r3, [r7, #11]
 810126e:	2b01      	cmp	r3, #1
 8101270:	d101      	bne.n	8101276 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101272:	bf30      	wfi
 8101274:	e000      	b.n	8101278 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101276:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101278:	4b10      	ldr	r3, [pc, #64]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810127a:	691b      	ldr	r3, [r3, #16]
 810127c:	4a0f      	ldr	r2, [pc, #60]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810127e:	f023 0304 	bic.w	r3, r3, #4
 8101282:	6113      	str	r3, [r2, #16]
 8101284:	e015      	b.n	81012b2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101286:	f7ff fdb1 	bl	8100dec <HAL_GetCurrentCPUID>
 810128a:	4603      	mov	r3, r0
 810128c:	2b03      	cmp	r3, #3
 810128e:	d106      	bne.n	810129e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101290:	4b09      	ldr	r3, [pc, #36]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101292:	691b      	ldr	r3, [r3, #16]
 8101294:	4a08      	ldr	r2, [pc, #32]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101296:	f023 0304 	bic.w	r3, r3, #4
 810129a:	6113      	str	r3, [r2, #16]
 810129c:	e009      	b.n	81012b2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810129e:	4b06      	ldr	r3, [pc, #24]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012a0:	695b      	ldr	r3, [r3, #20]
 81012a2:	4a05      	ldr	r2, [pc, #20]	; (81012b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012a4:	f023 0304 	bic.w	r3, r3, #4
 81012a8:	6153      	str	r3, [r2, #20]
 81012aa:	e002      	b.n	81012b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81012ac:	bf00      	nop
 81012ae:	e000      	b.n	81012b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81012b0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81012b2:	3710      	adds	r7, #16
 81012b4:	46bd      	mov	sp, r7
 81012b6:	bd80      	pop	{r7, pc}
 81012b8:	58024800 	.word	0x58024800
 81012bc:	e000ed00 	.word	0xe000ed00

081012c0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81012c0:	b580      	push	{r7, lr}
 81012c2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81012c4:	f7ff fd92 	bl	8100dec <HAL_GetCurrentCPUID>
 81012c8:	4603      	mov	r3, r0
 81012ca:	2b03      	cmp	r3, #3
 81012cc:	d101      	bne.n	81012d2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81012ce:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81012d0:	e001      	b.n	81012d6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81012d2:	bf40      	sev
    __WFE ();
 81012d4:	bf20      	wfe
}
 81012d6:	bf00      	nop
 81012d8:	bd80      	pop	{r7, pc}
	...

081012dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81012dc:	b480      	push	{r7}
 81012de:	b089      	sub	sp, #36	; 0x24
 81012e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81012e2:	4bb3      	ldr	r3, [pc, #716]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012e4:	691b      	ldr	r3, [r3, #16]
 81012e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81012ea:	2b18      	cmp	r3, #24
 81012ec:	f200 8155 	bhi.w	810159a <HAL_RCC_GetSysClockFreq+0x2be>
 81012f0:	a201      	add	r2, pc, #4	; (adr r2, 81012f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81012f6:	bf00      	nop
 81012f8:	0810135d 	.word	0x0810135d
 81012fc:	0810159b 	.word	0x0810159b
 8101300:	0810159b 	.word	0x0810159b
 8101304:	0810159b 	.word	0x0810159b
 8101308:	0810159b 	.word	0x0810159b
 810130c:	0810159b 	.word	0x0810159b
 8101310:	0810159b 	.word	0x0810159b
 8101314:	0810159b 	.word	0x0810159b
 8101318:	08101383 	.word	0x08101383
 810131c:	0810159b 	.word	0x0810159b
 8101320:	0810159b 	.word	0x0810159b
 8101324:	0810159b 	.word	0x0810159b
 8101328:	0810159b 	.word	0x0810159b
 810132c:	0810159b 	.word	0x0810159b
 8101330:	0810159b 	.word	0x0810159b
 8101334:	0810159b 	.word	0x0810159b
 8101338:	08101389 	.word	0x08101389
 810133c:	0810159b 	.word	0x0810159b
 8101340:	0810159b 	.word	0x0810159b
 8101344:	0810159b 	.word	0x0810159b
 8101348:	0810159b 	.word	0x0810159b
 810134c:	0810159b 	.word	0x0810159b
 8101350:	0810159b 	.word	0x0810159b
 8101354:	0810159b 	.word	0x0810159b
 8101358:	0810138f 	.word	0x0810138f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810135c:	4b94      	ldr	r3, [pc, #592]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	f003 0320 	and.w	r3, r3, #32
 8101364:	2b00      	cmp	r3, #0
 8101366:	d009      	beq.n	810137c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101368:	4b91      	ldr	r3, [pc, #580]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	08db      	lsrs	r3, r3, #3
 810136e:	f003 0303 	and.w	r3, r3, #3
 8101372:	4a90      	ldr	r2, [pc, #576]	; (81015b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101374:	fa22 f303 	lsr.w	r3, r2, r3
 8101378:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810137a:	e111      	b.n	81015a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810137c:	4b8d      	ldr	r3, [pc, #564]	; (81015b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810137e:	61bb      	str	r3, [r7, #24]
      break;
 8101380:	e10e      	b.n	81015a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101382:	4b8d      	ldr	r3, [pc, #564]	; (81015b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101384:	61bb      	str	r3, [r7, #24]
      break;
 8101386:	e10b      	b.n	81015a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101388:	4b8c      	ldr	r3, [pc, #560]	; (81015bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810138a:	61bb      	str	r3, [r7, #24]
      break;
 810138c:	e108      	b.n	81015a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810138e:	4b88      	ldr	r3, [pc, #544]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101392:	f003 0303 	and.w	r3, r3, #3
 8101396:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101398:	4b85      	ldr	r3, [pc, #532]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810139c:	091b      	lsrs	r3, r3, #4
 810139e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81013a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81013a4:	4b82      	ldr	r3, [pc, #520]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81013a8:	f003 0301 	and.w	r3, r3, #1
 81013ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81013ae:	4b80      	ldr	r3, [pc, #512]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81013b2:	08db      	lsrs	r3, r3, #3
 81013b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81013b8:	68fa      	ldr	r2, [r7, #12]
 81013ba:	fb02 f303 	mul.w	r3, r2, r3
 81013be:	ee07 3a90 	vmov	s15, r3
 81013c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81013ca:	693b      	ldr	r3, [r7, #16]
 81013cc:	2b00      	cmp	r3, #0
 81013ce:	f000 80e1 	beq.w	8101594 <HAL_RCC_GetSysClockFreq+0x2b8>
 81013d2:	697b      	ldr	r3, [r7, #20]
 81013d4:	2b02      	cmp	r3, #2
 81013d6:	f000 8083 	beq.w	81014e0 <HAL_RCC_GetSysClockFreq+0x204>
 81013da:	697b      	ldr	r3, [r7, #20]
 81013dc:	2b02      	cmp	r3, #2
 81013de:	f200 80a1 	bhi.w	8101524 <HAL_RCC_GetSysClockFreq+0x248>
 81013e2:	697b      	ldr	r3, [r7, #20]
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d003      	beq.n	81013f0 <HAL_RCC_GetSysClockFreq+0x114>
 81013e8:	697b      	ldr	r3, [r7, #20]
 81013ea:	2b01      	cmp	r3, #1
 81013ec:	d056      	beq.n	810149c <HAL_RCC_GetSysClockFreq+0x1c0>
 81013ee:	e099      	b.n	8101524 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81013f0:	4b6f      	ldr	r3, [pc, #444]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	f003 0320 	and.w	r3, r3, #32
 81013f8:	2b00      	cmp	r3, #0
 81013fa:	d02d      	beq.n	8101458 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81013fc:	4b6c      	ldr	r3, [pc, #432]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013fe:	681b      	ldr	r3, [r3, #0]
 8101400:	08db      	lsrs	r3, r3, #3
 8101402:	f003 0303 	and.w	r3, r3, #3
 8101406:	4a6b      	ldr	r2, [pc, #428]	; (81015b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101408:	fa22 f303 	lsr.w	r3, r2, r3
 810140c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	ee07 3a90 	vmov	s15, r3
 8101414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101418:	693b      	ldr	r3, [r7, #16]
 810141a:	ee07 3a90 	vmov	s15, r3
 810141e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101426:	4b62      	ldr	r3, [pc, #392]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810142a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810142e:	ee07 3a90 	vmov	s15, r3
 8101432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101436:	ed97 6a02 	vldr	s12, [r7, #8]
 810143a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81015c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810143e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810144a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101452:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101456:	e087      	b.n	8101568 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101458:	693b      	ldr	r3, [r7, #16]
 810145a:	ee07 3a90 	vmov	s15, r3
 810145e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101462:	eddf 6a58 	vldr	s13, [pc, #352]	; 81015c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810146a:	4b51      	ldr	r3, [pc, #324]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810146e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101472:	ee07 3a90 	vmov	s15, r3
 8101476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810147a:	ed97 6a02 	vldr	s12, [r7, #8]
 810147e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81015c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810148a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810148e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810149a:	e065      	b.n	8101568 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810149c:	693b      	ldr	r3, [r7, #16]
 810149e:	ee07 3a90 	vmov	s15, r3
 81014a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81015c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81014aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014ae:	4b40      	ldr	r3, [pc, #256]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014b6:	ee07 3a90 	vmov	s15, r3
 81014ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014be:	ed97 6a02 	vldr	s12, [r7, #8]
 81014c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81015c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81014de:	e043      	b.n	8101568 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014e0:	693b      	ldr	r3, [r7, #16]
 81014e2:	ee07 3a90 	vmov	s15, r3
 81014e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 81015cc <HAL_RCC_GetSysClockFreq+0x2f0>
 81014ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014f2:	4b2f      	ldr	r3, [pc, #188]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014fa:	ee07 3a90 	vmov	s15, r3
 81014fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101502:	ed97 6a02 	vldr	s12, [r7, #8]
 8101506:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81015c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810150a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810150e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810151e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101522:	e021      	b.n	8101568 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101524:	693b      	ldr	r3, [r7, #16]
 8101526:	ee07 3a90 	vmov	s15, r3
 810152a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810152e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81015c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101536:	4b1e      	ldr	r3, [pc, #120]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810153a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810153e:	ee07 3a90 	vmov	s15, r3
 8101542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101546:	ed97 6a02 	vldr	s12, [r7, #8]
 810154a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81015c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810154e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810155a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101566:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101568:	4b11      	ldr	r3, [pc, #68]	; (81015b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810156c:	0a5b      	lsrs	r3, r3, #9
 810156e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101572:	3301      	adds	r3, #1
 8101574:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101576:	683b      	ldr	r3, [r7, #0]
 8101578:	ee07 3a90 	vmov	s15, r3
 810157c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101580:	edd7 6a07 	vldr	s13, [r7, #28]
 8101584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810158c:	ee17 3a90 	vmov	r3, s15
 8101590:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101592:	e005      	b.n	81015a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101594:	2300      	movs	r3, #0
 8101596:	61bb      	str	r3, [r7, #24]
      break;
 8101598:	e002      	b.n	81015a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810159a:	4b07      	ldr	r3, [pc, #28]	; (81015b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810159c:	61bb      	str	r3, [r7, #24]
      break;
 810159e:	bf00      	nop
  }

  return sysclockfreq;
 81015a0:	69bb      	ldr	r3, [r7, #24]
}
 81015a2:	4618      	mov	r0, r3
 81015a4:	3724      	adds	r7, #36	; 0x24
 81015a6:	46bd      	mov	sp, r7
 81015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ac:	4770      	bx	lr
 81015ae:	bf00      	nop
 81015b0:	58024400 	.word	0x58024400
 81015b4:	03d09000 	.word	0x03d09000
 81015b8:	003d0900 	.word	0x003d0900
 81015bc:	017d7840 	.word	0x017d7840
 81015c0:	46000000 	.word	0x46000000
 81015c4:	4c742400 	.word	0x4c742400
 81015c8:	4a742400 	.word	0x4a742400
 81015cc:	4bbebc20 	.word	0x4bbebc20

081015d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81015d0:	b580      	push	{r7, lr}
 81015d2:	b082      	sub	sp, #8
 81015d4:	af00      	add	r7, sp, #0
 81015d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81015d8:	687b      	ldr	r3, [r7, #4]
 81015da:	2b00      	cmp	r3, #0
 81015dc:	d101      	bne.n	81015e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81015de:	2301      	movs	r3, #1
 81015e0:	e049      	b.n	8101676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81015e8:	b2db      	uxtb	r3, r3
 81015ea:	2b00      	cmp	r3, #0
 81015ec:	d106      	bne.n	81015fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81015ee:	687b      	ldr	r3, [r7, #4]
 81015f0:	2200      	movs	r2, #0
 81015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81015f6:	6878      	ldr	r0, [r7, #4]
 81015f8:	f7ff f8f4 	bl	81007e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81015fc:	687b      	ldr	r3, [r7, #4]
 81015fe:	2202      	movs	r2, #2
 8101600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101604:	687b      	ldr	r3, [r7, #4]
 8101606:	681a      	ldr	r2, [r3, #0]
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	3304      	adds	r3, #4
 810160c:	4619      	mov	r1, r3
 810160e:	4610      	mov	r0, r2
 8101610:	f000 fd5c 	bl	81020cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101614:	687b      	ldr	r3, [r7, #4]
 8101616:	2201      	movs	r2, #1
 8101618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810161c:	687b      	ldr	r3, [r7, #4]
 810161e:	2201      	movs	r2, #1
 8101620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	2201      	movs	r2, #1
 8101628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	2201      	movs	r2, #1
 8101630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	2201      	movs	r2, #1
 8101638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	2201      	movs	r2, #1
 8101640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	2201      	movs	r2, #1
 8101648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	2201      	movs	r2, #1
 8101650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	2201      	movs	r2, #1
 8101658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810165c:	687b      	ldr	r3, [r7, #4]
 810165e:	2201      	movs	r2, #1
 8101660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101664:	687b      	ldr	r3, [r7, #4]
 8101666:	2201      	movs	r2, #1
 8101668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	2201      	movs	r2, #1
 8101670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101674:	2300      	movs	r3, #0
}
 8101676:	4618      	mov	r0, r3
 8101678:	3708      	adds	r7, #8
 810167a:	46bd      	mov	sp, r7
 810167c:	bd80      	pop	{r7, pc}
	...

08101680 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8101680:	b480      	push	{r7}
 8101682:	b085      	sub	sp, #20
 8101684:	af00      	add	r7, sp, #0
 8101686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8101688:	687b      	ldr	r3, [r7, #4]
 810168a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810168e:	b2db      	uxtb	r3, r3
 8101690:	2b01      	cmp	r3, #1
 8101692:	d001      	beq.n	8101698 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8101694:	2301      	movs	r3, #1
 8101696:	e04c      	b.n	8101732 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101698:	687b      	ldr	r3, [r7, #4]
 810169a:	2202      	movs	r2, #2
 810169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81016a0:	687b      	ldr	r3, [r7, #4]
 81016a2:	681b      	ldr	r3, [r3, #0]
 81016a4:	4a26      	ldr	r2, [pc, #152]	; (8101740 <HAL_TIM_Base_Start+0xc0>)
 81016a6:	4293      	cmp	r3, r2
 81016a8:	d022      	beq.n	81016f0 <HAL_TIM_Base_Start+0x70>
 81016aa:	687b      	ldr	r3, [r7, #4]
 81016ac:	681b      	ldr	r3, [r3, #0]
 81016ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81016b2:	d01d      	beq.n	81016f0 <HAL_TIM_Base_Start+0x70>
 81016b4:	687b      	ldr	r3, [r7, #4]
 81016b6:	681b      	ldr	r3, [r3, #0]
 81016b8:	4a22      	ldr	r2, [pc, #136]	; (8101744 <HAL_TIM_Base_Start+0xc4>)
 81016ba:	4293      	cmp	r3, r2
 81016bc:	d018      	beq.n	81016f0 <HAL_TIM_Base_Start+0x70>
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	681b      	ldr	r3, [r3, #0]
 81016c2:	4a21      	ldr	r2, [pc, #132]	; (8101748 <HAL_TIM_Base_Start+0xc8>)
 81016c4:	4293      	cmp	r3, r2
 81016c6:	d013      	beq.n	81016f0 <HAL_TIM_Base_Start+0x70>
 81016c8:	687b      	ldr	r3, [r7, #4]
 81016ca:	681b      	ldr	r3, [r3, #0]
 81016cc:	4a1f      	ldr	r2, [pc, #124]	; (810174c <HAL_TIM_Base_Start+0xcc>)
 81016ce:	4293      	cmp	r3, r2
 81016d0:	d00e      	beq.n	81016f0 <HAL_TIM_Base_Start+0x70>
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	681b      	ldr	r3, [r3, #0]
 81016d6:	4a1e      	ldr	r2, [pc, #120]	; (8101750 <HAL_TIM_Base_Start+0xd0>)
 81016d8:	4293      	cmp	r3, r2
 81016da:	d009      	beq.n	81016f0 <HAL_TIM_Base_Start+0x70>
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	681b      	ldr	r3, [r3, #0]
 81016e0:	4a1c      	ldr	r2, [pc, #112]	; (8101754 <HAL_TIM_Base_Start+0xd4>)
 81016e2:	4293      	cmp	r3, r2
 81016e4:	d004      	beq.n	81016f0 <HAL_TIM_Base_Start+0x70>
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	681b      	ldr	r3, [r3, #0]
 81016ea:	4a1b      	ldr	r2, [pc, #108]	; (8101758 <HAL_TIM_Base_Start+0xd8>)
 81016ec:	4293      	cmp	r3, r2
 81016ee:	d115      	bne.n	810171c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	681b      	ldr	r3, [r3, #0]
 81016f4:	689a      	ldr	r2, [r3, #8]
 81016f6:	4b19      	ldr	r3, [pc, #100]	; (810175c <HAL_TIM_Base_Start+0xdc>)
 81016f8:	4013      	ands	r3, r2
 81016fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81016fc:	68fb      	ldr	r3, [r7, #12]
 81016fe:	2b06      	cmp	r3, #6
 8101700:	d015      	beq.n	810172e <HAL_TIM_Base_Start+0xae>
 8101702:	68fb      	ldr	r3, [r7, #12]
 8101704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101708:	d011      	beq.n	810172e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	681b      	ldr	r3, [r3, #0]
 810170e:	681a      	ldr	r2, [r3, #0]
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	681b      	ldr	r3, [r3, #0]
 8101714:	f042 0201 	orr.w	r2, r2, #1
 8101718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810171a:	e008      	b.n	810172e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	681b      	ldr	r3, [r3, #0]
 8101720:	681a      	ldr	r2, [r3, #0]
 8101722:	687b      	ldr	r3, [r7, #4]
 8101724:	681b      	ldr	r3, [r3, #0]
 8101726:	f042 0201 	orr.w	r2, r2, #1
 810172a:	601a      	str	r2, [r3, #0]
 810172c:	e000      	b.n	8101730 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810172e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101730:	2300      	movs	r3, #0
}
 8101732:	4618      	mov	r0, r3
 8101734:	3714      	adds	r7, #20
 8101736:	46bd      	mov	sp, r7
 8101738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810173c:	4770      	bx	lr
 810173e:	bf00      	nop
 8101740:	40010000 	.word	0x40010000
 8101744:	40000400 	.word	0x40000400
 8101748:	40000800 	.word	0x40000800
 810174c:	40000c00 	.word	0x40000c00
 8101750:	40010400 	.word	0x40010400
 8101754:	40001800 	.word	0x40001800
 8101758:	40014000 	.word	0x40014000
 810175c:	00010007 	.word	0x00010007

08101760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8101760:	b580      	push	{r7, lr}
 8101762:	b082      	sub	sp, #8
 8101764:	af00      	add	r7, sp, #0
 8101766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	2b00      	cmp	r3, #0
 810176c:	d101      	bne.n	8101772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810176e:	2301      	movs	r3, #1
 8101770:	e049      	b.n	8101806 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101772:	687b      	ldr	r3, [r7, #4]
 8101774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101778:	b2db      	uxtb	r3, r3
 810177a:	2b00      	cmp	r3, #0
 810177c:	d106      	bne.n	810178c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810177e:	687b      	ldr	r3, [r7, #4]
 8101780:	2200      	movs	r2, #0
 8101782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8101786:	6878      	ldr	r0, [r7, #4]
 8101788:	f000 f841 	bl	810180e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810178c:	687b      	ldr	r3, [r7, #4]
 810178e:	2202      	movs	r2, #2
 8101790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	681a      	ldr	r2, [r3, #0]
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	3304      	adds	r3, #4
 810179c:	4619      	mov	r1, r3
 810179e:	4610      	mov	r0, r2
 81017a0:	f000 fc94 	bl	81020cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81017a4:	687b      	ldr	r3, [r7, #4]
 81017a6:	2201      	movs	r2, #1
 81017a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	2201      	movs	r2, #1
 81017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	2201      	movs	r2, #1
 81017b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81017bc:	687b      	ldr	r3, [r7, #4]
 81017be:	2201      	movs	r2, #1
 81017c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81017c4:	687b      	ldr	r3, [r7, #4]
 81017c6:	2201      	movs	r2, #1
 81017c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81017cc:	687b      	ldr	r3, [r7, #4]
 81017ce:	2201      	movs	r2, #1
 81017d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81017d4:	687b      	ldr	r3, [r7, #4]
 81017d6:	2201      	movs	r2, #1
 81017d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	2201      	movs	r2, #1
 81017e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	2201      	movs	r2, #1
 81017e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81017ec:	687b      	ldr	r3, [r7, #4]
 81017ee:	2201      	movs	r2, #1
 81017f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	2201      	movs	r2, #1
 81017f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81017fc:	687b      	ldr	r3, [r7, #4]
 81017fe:	2201      	movs	r2, #1
 8101800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101804:	2300      	movs	r3, #0
}
 8101806:	4618      	mov	r0, r3
 8101808:	3708      	adds	r7, #8
 810180a:	46bd      	mov	sp, r7
 810180c:	bd80      	pop	{r7, pc}

0810180e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810180e:	b480      	push	{r7}
 8101810:	b083      	sub	sp, #12
 8101812:	af00      	add	r7, sp, #0
 8101814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8101816:	bf00      	nop
 8101818:	370c      	adds	r7, #12
 810181a:	46bd      	mov	sp, r7
 810181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101820:	4770      	bx	lr
	...

08101824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8101824:	b580      	push	{r7, lr}
 8101826:	b084      	sub	sp, #16
 8101828:	af00      	add	r7, sp, #0
 810182a:	6078      	str	r0, [r7, #4]
 810182c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810182e:	683b      	ldr	r3, [r7, #0]
 8101830:	2b00      	cmp	r3, #0
 8101832:	d109      	bne.n	8101848 <HAL_TIM_PWM_Start+0x24>
 8101834:	687b      	ldr	r3, [r7, #4]
 8101836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810183a:	b2db      	uxtb	r3, r3
 810183c:	2b01      	cmp	r3, #1
 810183e:	bf14      	ite	ne
 8101840:	2301      	movne	r3, #1
 8101842:	2300      	moveq	r3, #0
 8101844:	b2db      	uxtb	r3, r3
 8101846:	e03c      	b.n	81018c2 <HAL_TIM_PWM_Start+0x9e>
 8101848:	683b      	ldr	r3, [r7, #0]
 810184a:	2b04      	cmp	r3, #4
 810184c:	d109      	bne.n	8101862 <HAL_TIM_PWM_Start+0x3e>
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8101854:	b2db      	uxtb	r3, r3
 8101856:	2b01      	cmp	r3, #1
 8101858:	bf14      	ite	ne
 810185a:	2301      	movne	r3, #1
 810185c:	2300      	moveq	r3, #0
 810185e:	b2db      	uxtb	r3, r3
 8101860:	e02f      	b.n	81018c2 <HAL_TIM_PWM_Start+0x9e>
 8101862:	683b      	ldr	r3, [r7, #0]
 8101864:	2b08      	cmp	r3, #8
 8101866:	d109      	bne.n	810187c <HAL_TIM_PWM_Start+0x58>
 8101868:	687b      	ldr	r3, [r7, #4]
 810186a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810186e:	b2db      	uxtb	r3, r3
 8101870:	2b01      	cmp	r3, #1
 8101872:	bf14      	ite	ne
 8101874:	2301      	movne	r3, #1
 8101876:	2300      	moveq	r3, #0
 8101878:	b2db      	uxtb	r3, r3
 810187a:	e022      	b.n	81018c2 <HAL_TIM_PWM_Start+0x9e>
 810187c:	683b      	ldr	r3, [r7, #0]
 810187e:	2b0c      	cmp	r3, #12
 8101880:	d109      	bne.n	8101896 <HAL_TIM_PWM_Start+0x72>
 8101882:	687b      	ldr	r3, [r7, #4]
 8101884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101888:	b2db      	uxtb	r3, r3
 810188a:	2b01      	cmp	r3, #1
 810188c:	bf14      	ite	ne
 810188e:	2301      	movne	r3, #1
 8101890:	2300      	moveq	r3, #0
 8101892:	b2db      	uxtb	r3, r3
 8101894:	e015      	b.n	81018c2 <HAL_TIM_PWM_Start+0x9e>
 8101896:	683b      	ldr	r3, [r7, #0]
 8101898:	2b10      	cmp	r3, #16
 810189a:	d109      	bne.n	81018b0 <HAL_TIM_PWM_Start+0x8c>
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81018a2:	b2db      	uxtb	r3, r3
 81018a4:	2b01      	cmp	r3, #1
 81018a6:	bf14      	ite	ne
 81018a8:	2301      	movne	r3, #1
 81018aa:	2300      	moveq	r3, #0
 81018ac:	b2db      	uxtb	r3, r3
 81018ae:	e008      	b.n	81018c2 <HAL_TIM_PWM_Start+0x9e>
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81018b6:	b2db      	uxtb	r3, r3
 81018b8:	2b01      	cmp	r3, #1
 81018ba:	bf14      	ite	ne
 81018bc:	2301      	movne	r3, #1
 81018be:	2300      	moveq	r3, #0
 81018c0:	b2db      	uxtb	r3, r3
 81018c2:	2b00      	cmp	r3, #0
 81018c4:	d001      	beq.n	81018ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81018c6:	2301      	movs	r3, #1
 81018c8:	e0a1      	b.n	8101a0e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81018ca:	683b      	ldr	r3, [r7, #0]
 81018cc:	2b00      	cmp	r3, #0
 81018ce:	d104      	bne.n	81018da <HAL_TIM_PWM_Start+0xb6>
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	2202      	movs	r2, #2
 81018d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81018d8:	e023      	b.n	8101922 <HAL_TIM_PWM_Start+0xfe>
 81018da:	683b      	ldr	r3, [r7, #0]
 81018dc:	2b04      	cmp	r3, #4
 81018de:	d104      	bne.n	81018ea <HAL_TIM_PWM_Start+0xc6>
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	2202      	movs	r2, #2
 81018e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81018e8:	e01b      	b.n	8101922 <HAL_TIM_PWM_Start+0xfe>
 81018ea:	683b      	ldr	r3, [r7, #0]
 81018ec:	2b08      	cmp	r3, #8
 81018ee:	d104      	bne.n	81018fa <HAL_TIM_PWM_Start+0xd6>
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	2202      	movs	r2, #2
 81018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81018f8:	e013      	b.n	8101922 <HAL_TIM_PWM_Start+0xfe>
 81018fa:	683b      	ldr	r3, [r7, #0]
 81018fc:	2b0c      	cmp	r3, #12
 81018fe:	d104      	bne.n	810190a <HAL_TIM_PWM_Start+0xe6>
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	2202      	movs	r2, #2
 8101904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101908:	e00b      	b.n	8101922 <HAL_TIM_PWM_Start+0xfe>
 810190a:	683b      	ldr	r3, [r7, #0]
 810190c:	2b10      	cmp	r3, #16
 810190e:	d104      	bne.n	810191a <HAL_TIM_PWM_Start+0xf6>
 8101910:	687b      	ldr	r3, [r7, #4]
 8101912:	2202      	movs	r2, #2
 8101914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101918:	e003      	b.n	8101922 <HAL_TIM_PWM_Start+0xfe>
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	2202      	movs	r2, #2
 810191e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8101922:	687b      	ldr	r3, [r7, #4]
 8101924:	681b      	ldr	r3, [r3, #0]
 8101926:	2201      	movs	r2, #1
 8101928:	6839      	ldr	r1, [r7, #0]
 810192a:	4618      	mov	r0, r3
 810192c:	f000 ffe6 	bl	81028fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	681b      	ldr	r3, [r3, #0]
 8101934:	4a38      	ldr	r2, [pc, #224]	; (8101a18 <HAL_TIM_PWM_Start+0x1f4>)
 8101936:	4293      	cmp	r3, r2
 8101938:	d013      	beq.n	8101962 <HAL_TIM_PWM_Start+0x13e>
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	681b      	ldr	r3, [r3, #0]
 810193e:	4a37      	ldr	r2, [pc, #220]	; (8101a1c <HAL_TIM_PWM_Start+0x1f8>)
 8101940:	4293      	cmp	r3, r2
 8101942:	d00e      	beq.n	8101962 <HAL_TIM_PWM_Start+0x13e>
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	681b      	ldr	r3, [r3, #0]
 8101948:	4a35      	ldr	r2, [pc, #212]	; (8101a20 <HAL_TIM_PWM_Start+0x1fc>)
 810194a:	4293      	cmp	r3, r2
 810194c:	d009      	beq.n	8101962 <HAL_TIM_PWM_Start+0x13e>
 810194e:	687b      	ldr	r3, [r7, #4]
 8101950:	681b      	ldr	r3, [r3, #0]
 8101952:	4a34      	ldr	r2, [pc, #208]	; (8101a24 <HAL_TIM_PWM_Start+0x200>)
 8101954:	4293      	cmp	r3, r2
 8101956:	d004      	beq.n	8101962 <HAL_TIM_PWM_Start+0x13e>
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	681b      	ldr	r3, [r3, #0]
 810195c:	4a32      	ldr	r2, [pc, #200]	; (8101a28 <HAL_TIM_PWM_Start+0x204>)
 810195e:	4293      	cmp	r3, r2
 8101960:	d101      	bne.n	8101966 <HAL_TIM_PWM_Start+0x142>
 8101962:	2301      	movs	r3, #1
 8101964:	e000      	b.n	8101968 <HAL_TIM_PWM_Start+0x144>
 8101966:	2300      	movs	r3, #0
 8101968:	2b00      	cmp	r3, #0
 810196a:	d007      	beq.n	810197c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	681b      	ldr	r3, [r3, #0]
 8101970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8101972:	687b      	ldr	r3, [r7, #4]
 8101974:	681b      	ldr	r3, [r3, #0]
 8101976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810197a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	4a25      	ldr	r2, [pc, #148]	; (8101a18 <HAL_TIM_PWM_Start+0x1f4>)
 8101982:	4293      	cmp	r3, r2
 8101984:	d022      	beq.n	81019cc <HAL_TIM_PWM_Start+0x1a8>
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	681b      	ldr	r3, [r3, #0]
 810198a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810198e:	d01d      	beq.n	81019cc <HAL_TIM_PWM_Start+0x1a8>
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	681b      	ldr	r3, [r3, #0]
 8101994:	4a25      	ldr	r2, [pc, #148]	; (8101a2c <HAL_TIM_PWM_Start+0x208>)
 8101996:	4293      	cmp	r3, r2
 8101998:	d018      	beq.n	81019cc <HAL_TIM_PWM_Start+0x1a8>
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	681b      	ldr	r3, [r3, #0]
 810199e:	4a24      	ldr	r2, [pc, #144]	; (8101a30 <HAL_TIM_PWM_Start+0x20c>)
 81019a0:	4293      	cmp	r3, r2
 81019a2:	d013      	beq.n	81019cc <HAL_TIM_PWM_Start+0x1a8>
 81019a4:	687b      	ldr	r3, [r7, #4]
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	4a22      	ldr	r2, [pc, #136]	; (8101a34 <HAL_TIM_PWM_Start+0x210>)
 81019aa:	4293      	cmp	r3, r2
 81019ac:	d00e      	beq.n	81019cc <HAL_TIM_PWM_Start+0x1a8>
 81019ae:	687b      	ldr	r3, [r7, #4]
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	4a1a      	ldr	r2, [pc, #104]	; (8101a1c <HAL_TIM_PWM_Start+0x1f8>)
 81019b4:	4293      	cmp	r3, r2
 81019b6:	d009      	beq.n	81019cc <HAL_TIM_PWM_Start+0x1a8>
 81019b8:	687b      	ldr	r3, [r7, #4]
 81019ba:	681b      	ldr	r3, [r3, #0]
 81019bc:	4a1e      	ldr	r2, [pc, #120]	; (8101a38 <HAL_TIM_PWM_Start+0x214>)
 81019be:	4293      	cmp	r3, r2
 81019c0:	d004      	beq.n	81019cc <HAL_TIM_PWM_Start+0x1a8>
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	681b      	ldr	r3, [r3, #0]
 81019c6:	4a16      	ldr	r2, [pc, #88]	; (8101a20 <HAL_TIM_PWM_Start+0x1fc>)
 81019c8:	4293      	cmp	r3, r2
 81019ca:	d115      	bne.n	81019f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	681b      	ldr	r3, [r3, #0]
 81019d0:	689a      	ldr	r2, [r3, #8]
 81019d2:	4b1a      	ldr	r3, [pc, #104]	; (8101a3c <HAL_TIM_PWM_Start+0x218>)
 81019d4:	4013      	ands	r3, r2
 81019d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81019d8:	68fb      	ldr	r3, [r7, #12]
 81019da:	2b06      	cmp	r3, #6
 81019dc:	d015      	beq.n	8101a0a <HAL_TIM_PWM_Start+0x1e6>
 81019de:	68fb      	ldr	r3, [r7, #12]
 81019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81019e4:	d011      	beq.n	8101a0a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81019e6:	687b      	ldr	r3, [r7, #4]
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	681a      	ldr	r2, [r3, #0]
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	f042 0201 	orr.w	r2, r2, #1
 81019f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81019f6:	e008      	b.n	8101a0a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	681a      	ldr	r2, [r3, #0]
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	681b      	ldr	r3, [r3, #0]
 8101a02:	f042 0201 	orr.w	r2, r2, #1
 8101a06:	601a      	str	r2, [r3, #0]
 8101a08:	e000      	b.n	8101a0c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101a0c:	2300      	movs	r3, #0
}
 8101a0e:	4618      	mov	r0, r3
 8101a10:	3710      	adds	r7, #16
 8101a12:	46bd      	mov	sp, r7
 8101a14:	bd80      	pop	{r7, pc}
 8101a16:	bf00      	nop
 8101a18:	40010000 	.word	0x40010000
 8101a1c:	40010400 	.word	0x40010400
 8101a20:	40014000 	.word	0x40014000
 8101a24:	40014400 	.word	0x40014400
 8101a28:	40014800 	.word	0x40014800
 8101a2c:	40000400 	.word	0x40000400
 8101a30:	40000800 	.word	0x40000800
 8101a34:	40000c00 	.word	0x40000c00
 8101a38:	40001800 	.word	0x40001800
 8101a3c:	00010007 	.word	0x00010007

08101a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8101a40:	b580      	push	{r7, lr}
 8101a42:	b084      	sub	sp, #16
 8101a44:	af00      	add	r7, sp, #0
 8101a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	68db      	ldr	r3, [r3, #12]
 8101a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	681b      	ldr	r3, [r3, #0]
 8101a54:	691b      	ldr	r3, [r3, #16]
 8101a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8101a58:	68bb      	ldr	r3, [r7, #8]
 8101a5a:	f003 0302 	and.w	r3, r3, #2
 8101a5e:	2b00      	cmp	r3, #0
 8101a60:	d020      	beq.n	8101aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8101a62:	68fb      	ldr	r3, [r7, #12]
 8101a64:	f003 0302 	and.w	r3, r3, #2
 8101a68:	2b00      	cmp	r3, #0
 8101a6a:	d01b      	beq.n	8101aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8101a6c:	687b      	ldr	r3, [r7, #4]
 8101a6e:	681b      	ldr	r3, [r3, #0]
 8101a70:	f06f 0202 	mvn.w	r2, #2
 8101a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	2201      	movs	r2, #1
 8101a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	699b      	ldr	r3, [r3, #24]
 8101a82:	f003 0303 	and.w	r3, r3, #3
 8101a86:	2b00      	cmp	r3, #0
 8101a88:	d003      	beq.n	8101a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8101a8a:	6878      	ldr	r0, [r7, #4]
 8101a8c:	f000 fb00 	bl	8102090 <HAL_TIM_IC_CaptureCallback>
 8101a90:	e005      	b.n	8101a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8101a92:	6878      	ldr	r0, [r7, #4]
 8101a94:	f000 faf2 	bl	810207c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101a98:	6878      	ldr	r0, [r7, #4]
 8101a9a:	f000 fb03 	bl	81020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8101aa4:	68bb      	ldr	r3, [r7, #8]
 8101aa6:	f003 0304 	and.w	r3, r3, #4
 8101aaa:	2b00      	cmp	r3, #0
 8101aac:	d020      	beq.n	8101af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8101aae:	68fb      	ldr	r3, [r7, #12]
 8101ab0:	f003 0304 	and.w	r3, r3, #4
 8101ab4:	2b00      	cmp	r3, #0
 8101ab6:	d01b      	beq.n	8101af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8101ab8:	687b      	ldr	r3, [r7, #4]
 8101aba:	681b      	ldr	r3, [r3, #0]
 8101abc:	f06f 0204 	mvn.w	r2, #4
 8101ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	2202      	movs	r2, #2
 8101ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	681b      	ldr	r3, [r3, #0]
 8101acc:	699b      	ldr	r3, [r3, #24]
 8101ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101ad2:	2b00      	cmp	r3, #0
 8101ad4:	d003      	beq.n	8101ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101ad6:	6878      	ldr	r0, [r7, #4]
 8101ad8:	f000 fada 	bl	8102090 <HAL_TIM_IC_CaptureCallback>
 8101adc:	e005      	b.n	8101aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101ade:	6878      	ldr	r0, [r7, #4]
 8101ae0:	f000 facc 	bl	810207c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101ae4:	6878      	ldr	r0, [r7, #4]
 8101ae6:	f000 fadd 	bl	81020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101aea:	687b      	ldr	r3, [r7, #4]
 8101aec:	2200      	movs	r2, #0
 8101aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8101af0:	68bb      	ldr	r3, [r7, #8]
 8101af2:	f003 0308 	and.w	r3, r3, #8
 8101af6:	2b00      	cmp	r3, #0
 8101af8:	d020      	beq.n	8101b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8101afa:	68fb      	ldr	r3, [r7, #12]
 8101afc:	f003 0308 	and.w	r3, r3, #8
 8101b00:	2b00      	cmp	r3, #0
 8101b02:	d01b      	beq.n	8101b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	681b      	ldr	r3, [r3, #0]
 8101b08:	f06f 0208 	mvn.w	r2, #8
 8101b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	2204      	movs	r2, #4
 8101b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	69db      	ldr	r3, [r3, #28]
 8101b1a:	f003 0303 	and.w	r3, r3, #3
 8101b1e:	2b00      	cmp	r3, #0
 8101b20:	d003      	beq.n	8101b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101b22:	6878      	ldr	r0, [r7, #4]
 8101b24:	f000 fab4 	bl	8102090 <HAL_TIM_IC_CaptureCallback>
 8101b28:	e005      	b.n	8101b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101b2a:	6878      	ldr	r0, [r7, #4]
 8101b2c:	f000 faa6 	bl	810207c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101b30:	6878      	ldr	r0, [r7, #4]
 8101b32:	f000 fab7 	bl	81020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	2200      	movs	r2, #0
 8101b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8101b3c:	68bb      	ldr	r3, [r7, #8]
 8101b3e:	f003 0310 	and.w	r3, r3, #16
 8101b42:	2b00      	cmp	r3, #0
 8101b44:	d020      	beq.n	8101b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8101b46:	68fb      	ldr	r3, [r7, #12]
 8101b48:	f003 0310 	and.w	r3, r3, #16
 8101b4c:	2b00      	cmp	r3, #0
 8101b4e:	d01b      	beq.n	8101b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	681b      	ldr	r3, [r3, #0]
 8101b54:	f06f 0210 	mvn.w	r2, #16
 8101b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	2208      	movs	r2, #8
 8101b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	681b      	ldr	r3, [r3, #0]
 8101b64:	69db      	ldr	r3, [r3, #28]
 8101b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101b6a:	2b00      	cmp	r3, #0
 8101b6c:	d003      	beq.n	8101b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101b6e:	6878      	ldr	r0, [r7, #4]
 8101b70:	f000 fa8e 	bl	8102090 <HAL_TIM_IC_CaptureCallback>
 8101b74:	e005      	b.n	8101b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101b76:	6878      	ldr	r0, [r7, #4]
 8101b78:	f000 fa80 	bl	810207c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101b7c:	6878      	ldr	r0, [r7, #4]
 8101b7e:	f000 fa91 	bl	81020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	2200      	movs	r2, #0
 8101b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8101b88:	68bb      	ldr	r3, [r7, #8]
 8101b8a:	f003 0301 	and.w	r3, r3, #1
 8101b8e:	2b00      	cmp	r3, #0
 8101b90:	d00c      	beq.n	8101bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8101b92:	68fb      	ldr	r3, [r7, #12]
 8101b94:	f003 0301 	and.w	r3, r3, #1
 8101b98:	2b00      	cmp	r3, #0
 8101b9a:	d007      	beq.n	8101bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	681b      	ldr	r3, [r3, #0]
 8101ba0:	f06f 0201 	mvn.w	r2, #1
 8101ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8101ba6:	6878      	ldr	r0, [r7, #4]
 8101ba8:	f000 fa5e 	bl	8102068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8101bac:	68bb      	ldr	r3, [r7, #8]
 8101bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101bb2:	2b00      	cmp	r3, #0
 8101bb4:	d104      	bne.n	8101bc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8101bb6:	68bb      	ldr	r3, [r7, #8]
 8101bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8101bbc:	2b00      	cmp	r3, #0
 8101bbe:	d00c      	beq.n	8101bda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8101bc0:	68fb      	ldr	r3, [r7, #12]
 8101bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101bc6:	2b00      	cmp	r3, #0
 8101bc8:	d007      	beq.n	8101bda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8101bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101bd4:	6878      	ldr	r0, [r7, #4]
 8101bd6:	f000 ff4f 	bl	8102a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8101bda:	68bb      	ldr	r3, [r7, #8]
 8101bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101be0:	2b00      	cmp	r3, #0
 8101be2:	d00c      	beq.n	8101bfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8101be4:	68fb      	ldr	r3, [r7, #12]
 8101be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101bea:	2b00      	cmp	r3, #0
 8101bec:	d007      	beq.n	8101bfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	681b      	ldr	r3, [r3, #0]
 8101bf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8101bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101bf8:	6878      	ldr	r0, [r7, #4]
 8101bfa:	f000 ff47 	bl	8102a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8101bfe:	68bb      	ldr	r3, [r7, #8]
 8101c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101c04:	2b00      	cmp	r3, #0
 8101c06:	d00c      	beq.n	8101c22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8101c08:	68fb      	ldr	r3, [r7, #12]
 8101c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101c0e:	2b00      	cmp	r3, #0
 8101c10:	d007      	beq.n	8101c22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8101c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101c1c:	6878      	ldr	r0, [r7, #4]
 8101c1e:	f000 fa4b 	bl	81020b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8101c22:	68bb      	ldr	r3, [r7, #8]
 8101c24:	f003 0320 	and.w	r3, r3, #32
 8101c28:	2b00      	cmp	r3, #0
 8101c2a:	d00c      	beq.n	8101c46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8101c2c:	68fb      	ldr	r3, [r7, #12]
 8101c2e:	f003 0320 	and.w	r3, r3, #32
 8101c32:	2b00      	cmp	r3, #0
 8101c34:	d007      	beq.n	8101c46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	681b      	ldr	r3, [r3, #0]
 8101c3a:	f06f 0220 	mvn.w	r2, #32
 8101c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101c40:	6878      	ldr	r0, [r7, #4]
 8101c42:	f000 ff0f 	bl	8102a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8101c46:	bf00      	nop
 8101c48:	3710      	adds	r7, #16
 8101c4a:	46bd      	mov	sp, r7
 8101c4c:	bd80      	pop	{r7, pc}
	...

08101c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8101c50:	b580      	push	{r7, lr}
 8101c52:	b086      	sub	sp, #24
 8101c54:	af00      	add	r7, sp, #0
 8101c56:	60f8      	str	r0, [r7, #12]
 8101c58:	60b9      	str	r1, [r7, #8]
 8101c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101c5c:	2300      	movs	r3, #0
 8101c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8101c60:	68fb      	ldr	r3, [r7, #12]
 8101c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8101c66:	2b01      	cmp	r3, #1
 8101c68:	d101      	bne.n	8101c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8101c6a:	2302      	movs	r3, #2
 8101c6c:	e0ff      	b.n	8101e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8101c6e:	68fb      	ldr	r3, [r7, #12]
 8101c70:	2201      	movs	r2, #1
 8101c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	2b14      	cmp	r3, #20
 8101c7a:	f200 80f0 	bhi.w	8101e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8101c7e:	a201      	add	r2, pc, #4	; (adr r2, 8101c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8101c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c84:	08101cd9 	.word	0x08101cd9
 8101c88:	08101e5f 	.word	0x08101e5f
 8101c8c:	08101e5f 	.word	0x08101e5f
 8101c90:	08101e5f 	.word	0x08101e5f
 8101c94:	08101d19 	.word	0x08101d19
 8101c98:	08101e5f 	.word	0x08101e5f
 8101c9c:	08101e5f 	.word	0x08101e5f
 8101ca0:	08101e5f 	.word	0x08101e5f
 8101ca4:	08101d5b 	.word	0x08101d5b
 8101ca8:	08101e5f 	.word	0x08101e5f
 8101cac:	08101e5f 	.word	0x08101e5f
 8101cb0:	08101e5f 	.word	0x08101e5f
 8101cb4:	08101d9b 	.word	0x08101d9b
 8101cb8:	08101e5f 	.word	0x08101e5f
 8101cbc:	08101e5f 	.word	0x08101e5f
 8101cc0:	08101e5f 	.word	0x08101e5f
 8101cc4:	08101ddd 	.word	0x08101ddd
 8101cc8:	08101e5f 	.word	0x08101e5f
 8101ccc:	08101e5f 	.word	0x08101e5f
 8101cd0:	08101e5f 	.word	0x08101e5f
 8101cd4:	08101e1d 	.word	0x08101e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8101cd8:	68fb      	ldr	r3, [r7, #12]
 8101cda:	681b      	ldr	r3, [r3, #0]
 8101cdc:	68b9      	ldr	r1, [r7, #8]
 8101cde:	4618      	mov	r0, r3
 8101ce0:	f000 fa9a 	bl	8102218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8101ce4:	68fb      	ldr	r3, [r7, #12]
 8101ce6:	681b      	ldr	r3, [r3, #0]
 8101ce8:	699a      	ldr	r2, [r3, #24]
 8101cea:	68fb      	ldr	r3, [r7, #12]
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	f042 0208 	orr.w	r2, r2, #8
 8101cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8101cf4:	68fb      	ldr	r3, [r7, #12]
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	699a      	ldr	r2, [r3, #24]
 8101cfa:	68fb      	ldr	r3, [r7, #12]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	f022 0204 	bic.w	r2, r2, #4
 8101d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8101d04:	68fb      	ldr	r3, [r7, #12]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	6999      	ldr	r1, [r3, #24]
 8101d0a:	68bb      	ldr	r3, [r7, #8]
 8101d0c:	691a      	ldr	r2, [r3, #16]
 8101d0e:	68fb      	ldr	r3, [r7, #12]
 8101d10:	681b      	ldr	r3, [r3, #0]
 8101d12:	430a      	orrs	r2, r1
 8101d14:	619a      	str	r2, [r3, #24]
      break;
 8101d16:	e0a5      	b.n	8101e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8101d18:	68fb      	ldr	r3, [r7, #12]
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	68b9      	ldr	r1, [r7, #8]
 8101d1e:	4618      	mov	r0, r3
 8101d20:	f000 fb0a 	bl	8102338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8101d24:	68fb      	ldr	r3, [r7, #12]
 8101d26:	681b      	ldr	r3, [r3, #0]
 8101d28:	699a      	ldr	r2, [r3, #24]
 8101d2a:	68fb      	ldr	r3, [r7, #12]
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8101d34:	68fb      	ldr	r3, [r7, #12]
 8101d36:	681b      	ldr	r3, [r3, #0]
 8101d38:	699a      	ldr	r2, [r3, #24]
 8101d3a:	68fb      	ldr	r3, [r7, #12]
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8101d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8101d44:	68fb      	ldr	r3, [r7, #12]
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	6999      	ldr	r1, [r3, #24]
 8101d4a:	68bb      	ldr	r3, [r7, #8]
 8101d4c:	691b      	ldr	r3, [r3, #16]
 8101d4e:	021a      	lsls	r2, r3, #8
 8101d50:	68fb      	ldr	r3, [r7, #12]
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	430a      	orrs	r2, r1
 8101d56:	619a      	str	r2, [r3, #24]
      break;
 8101d58:	e084      	b.n	8101e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8101d5a:	68fb      	ldr	r3, [r7, #12]
 8101d5c:	681b      	ldr	r3, [r3, #0]
 8101d5e:	68b9      	ldr	r1, [r7, #8]
 8101d60:	4618      	mov	r0, r3
 8101d62:	f000 fb73 	bl	810244c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8101d66:	68fb      	ldr	r3, [r7, #12]
 8101d68:	681b      	ldr	r3, [r3, #0]
 8101d6a:	69da      	ldr	r2, [r3, #28]
 8101d6c:	68fb      	ldr	r3, [r7, #12]
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	f042 0208 	orr.w	r2, r2, #8
 8101d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8101d76:	68fb      	ldr	r3, [r7, #12]
 8101d78:	681b      	ldr	r3, [r3, #0]
 8101d7a:	69da      	ldr	r2, [r3, #28]
 8101d7c:	68fb      	ldr	r3, [r7, #12]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	f022 0204 	bic.w	r2, r2, #4
 8101d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8101d86:	68fb      	ldr	r3, [r7, #12]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	69d9      	ldr	r1, [r3, #28]
 8101d8c:	68bb      	ldr	r3, [r7, #8]
 8101d8e:	691a      	ldr	r2, [r3, #16]
 8101d90:	68fb      	ldr	r3, [r7, #12]
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	430a      	orrs	r2, r1
 8101d96:	61da      	str	r2, [r3, #28]
      break;
 8101d98:	e064      	b.n	8101e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8101d9a:	68fb      	ldr	r3, [r7, #12]
 8101d9c:	681b      	ldr	r3, [r3, #0]
 8101d9e:	68b9      	ldr	r1, [r7, #8]
 8101da0:	4618      	mov	r0, r3
 8101da2:	f000 fbdb 	bl	810255c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8101da6:	68fb      	ldr	r3, [r7, #12]
 8101da8:	681b      	ldr	r3, [r3, #0]
 8101daa:	69da      	ldr	r2, [r3, #28]
 8101dac:	68fb      	ldr	r3, [r7, #12]
 8101dae:	681b      	ldr	r3, [r3, #0]
 8101db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8101db6:	68fb      	ldr	r3, [r7, #12]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	69da      	ldr	r2, [r3, #28]
 8101dbc:	68fb      	ldr	r3, [r7, #12]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8101dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8101dc6:	68fb      	ldr	r3, [r7, #12]
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	69d9      	ldr	r1, [r3, #28]
 8101dcc:	68bb      	ldr	r3, [r7, #8]
 8101dce:	691b      	ldr	r3, [r3, #16]
 8101dd0:	021a      	lsls	r2, r3, #8
 8101dd2:	68fb      	ldr	r3, [r7, #12]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	430a      	orrs	r2, r1
 8101dd8:	61da      	str	r2, [r3, #28]
      break;
 8101dda:	e043      	b.n	8101e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8101ddc:	68fb      	ldr	r3, [r7, #12]
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	68b9      	ldr	r1, [r7, #8]
 8101de2:	4618      	mov	r0, r3
 8101de4:	f000 fc24 	bl	8102630 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8101de8:	68fb      	ldr	r3, [r7, #12]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101dee:	68fb      	ldr	r3, [r7, #12]
 8101df0:	681b      	ldr	r3, [r3, #0]
 8101df2:	f042 0208 	orr.w	r2, r2, #8
 8101df6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8101df8:	68fb      	ldr	r3, [r7, #12]
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101dfe:	68fb      	ldr	r3, [r7, #12]
 8101e00:	681b      	ldr	r3, [r3, #0]
 8101e02:	f022 0204 	bic.w	r2, r2, #4
 8101e06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8101e08:	68fb      	ldr	r3, [r7, #12]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8101e0e:	68bb      	ldr	r3, [r7, #8]
 8101e10:	691a      	ldr	r2, [r3, #16]
 8101e12:	68fb      	ldr	r3, [r7, #12]
 8101e14:	681b      	ldr	r3, [r3, #0]
 8101e16:	430a      	orrs	r2, r1
 8101e18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8101e1a:	e023      	b.n	8101e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8101e1c:	68fb      	ldr	r3, [r7, #12]
 8101e1e:	681b      	ldr	r3, [r3, #0]
 8101e20:	68b9      	ldr	r1, [r7, #8]
 8101e22:	4618      	mov	r0, r3
 8101e24:	f000 fc68 	bl	81026f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8101e28:	68fb      	ldr	r3, [r7, #12]
 8101e2a:	681b      	ldr	r3, [r3, #0]
 8101e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101e2e:	68fb      	ldr	r3, [r7, #12]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101e36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8101e38:	68fb      	ldr	r3, [r7, #12]
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101e3e:	68fb      	ldr	r3, [r7, #12]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8101e46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8101e48:	68fb      	ldr	r3, [r7, #12]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8101e4e:	68bb      	ldr	r3, [r7, #8]
 8101e50:	691b      	ldr	r3, [r3, #16]
 8101e52:	021a      	lsls	r2, r3, #8
 8101e54:	68fb      	ldr	r3, [r7, #12]
 8101e56:	681b      	ldr	r3, [r3, #0]
 8101e58:	430a      	orrs	r2, r1
 8101e5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8101e5c:	e002      	b.n	8101e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8101e5e:	2301      	movs	r3, #1
 8101e60:	75fb      	strb	r3, [r7, #23]
      break;
 8101e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8101e64:	68fb      	ldr	r3, [r7, #12]
 8101e66:	2200      	movs	r2, #0
 8101e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8101e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8101e6e:	4618      	mov	r0, r3
 8101e70:	3718      	adds	r7, #24
 8101e72:	46bd      	mov	sp, r7
 8101e74:	bd80      	pop	{r7, pc}
 8101e76:	bf00      	nop

08101e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8101e78:	b580      	push	{r7, lr}
 8101e7a:	b084      	sub	sp, #16
 8101e7c:	af00      	add	r7, sp, #0
 8101e7e:	6078      	str	r0, [r7, #4]
 8101e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8101e82:	2300      	movs	r3, #0
 8101e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8101e86:	687b      	ldr	r3, [r7, #4]
 8101e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8101e8c:	2b01      	cmp	r3, #1
 8101e8e:	d101      	bne.n	8101e94 <HAL_TIM_ConfigClockSource+0x1c>
 8101e90:	2302      	movs	r3, #2
 8101e92:	e0de      	b.n	8102052 <HAL_TIM_ConfigClockSource+0x1da>
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	2201      	movs	r2, #1
 8101e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	2202      	movs	r2, #2
 8101ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	689b      	ldr	r3, [r3, #8]
 8101eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8101eac:	68bb      	ldr	r3, [r7, #8]
 8101eae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8101eb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8101eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8101eb8:	68bb      	ldr	r3, [r7, #8]
 8101eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8101ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	68ba      	ldr	r2, [r7, #8]
 8101ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8101ec8:	683b      	ldr	r3, [r7, #0]
 8101eca:	681b      	ldr	r3, [r3, #0]
 8101ecc:	4a63      	ldr	r2, [pc, #396]	; (810205c <HAL_TIM_ConfigClockSource+0x1e4>)
 8101ece:	4293      	cmp	r3, r2
 8101ed0:	f000 80a9 	beq.w	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101ed4:	4a61      	ldr	r2, [pc, #388]	; (810205c <HAL_TIM_ConfigClockSource+0x1e4>)
 8101ed6:	4293      	cmp	r3, r2
 8101ed8:	f200 80ae 	bhi.w	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101edc:	4a60      	ldr	r2, [pc, #384]	; (8102060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8101ede:	4293      	cmp	r3, r2
 8101ee0:	f000 80a1 	beq.w	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101ee4:	4a5e      	ldr	r2, [pc, #376]	; (8102060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8101ee6:	4293      	cmp	r3, r2
 8101ee8:	f200 80a6 	bhi.w	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101eec:	4a5d      	ldr	r2, [pc, #372]	; (8102064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8101eee:	4293      	cmp	r3, r2
 8101ef0:	f000 8099 	beq.w	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101ef4:	4a5b      	ldr	r2, [pc, #364]	; (8102064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8101ef6:	4293      	cmp	r3, r2
 8101ef8:	f200 809e 	bhi.w	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101efc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8101f00:	f000 8091 	beq.w	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101f04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8101f08:	f200 8096 	bhi.w	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101f10:	f000 8089 	beq.w	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101f18:	f200 808e 	bhi.w	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101f20:	d03e      	beq.n	8101fa0 <HAL_TIM_ConfigClockSource+0x128>
 8101f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101f26:	f200 8087 	bhi.w	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101f2e:	f000 8086 	beq.w	810203e <HAL_TIM_ConfigClockSource+0x1c6>
 8101f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101f36:	d87f      	bhi.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f38:	2b70      	cmp	r3, #112	; 0x70
 8101f3a:	d01a      	beq.n	8101f72 <HAL_TIM_ConfigClockSource+0xfa>
 8101f3c:	2b70      	cmp	r3, #112	; 0x70
 8101f3e:	d87b      	bhi.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f40:	2b60      	cmp	r3, #96	; 0x60
 8101f42:	d050      	beq.n	8101fe6 <HAL_TIM_ConfigClockSource+0x16e>
 8101f44:	2b60      	cmp	r3, #96	; 0x60
 8101f46:	d877      	bhi.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f48:	2b50      	cmp	r3, #80	; 0x50
 8101f4a:	d03c      	beq.n	8101fc6 <HAL_TIM_ConfigClockSource+0x14e>
 8101f4c:	2b50      	cmp	r3, #80	; 0x50
 8101f4e:	d873      	bhi.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f50:	2b40      	cmp	r3, #64	; 0x40
 8101f52:	d058      	beq.n	8102006 <HAL_TIM_ConfigClockSource+0x18e>
 8101f54:	2b40      	cmp	r3, #64	; 0x40
 8101f56:	d86f      	bhi.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f58:	2b30      	cmp	r3, #48	; 0x30
 8101f5a:	d064      	beq.n	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101f5c:	2b30      	cmp	r3, #48	; 0x30
 8101f5e:	d86b      	bhi.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f60:	2b20      	cmp	r3, #32
 8101f62:	d060      	beq.n	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101f64:	2b20      	cmp	r3, #32
 8101f66:	d867      	bhi.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
 8101f68:	2b00      	cmp	r3, #0
 8101f6a:	d05c      	beq.n	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101f6c:	2b10      	cmp	r3, #16
 8101f6e:	d05a      	beq.n	8102026 <HAL_TIM_ConfigClockSource+0x1ae>
 8101f70:	e062      	b.n	8102038 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8101f76:	683b      	ldr	r3, [r7, #0]
 8101f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8101f7a:	683b      	ldr	r3, [r7, #0]
 8101f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8101f7e:	683b      	ldr	r3, [r7, #0]
 8101f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8101f82:	f000 fc9b 	bl	81028bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	689b      	ldr	r3, [r3, #8]
 8101f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8101f8e:	68bb      	ldr	r3, [r7, #8]
 8101f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8101f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	681b      	ldr	r3, [r3, #0]
 8101f9a:	68ba      	ldr	r2, [r7, #8]
 8101f9c:	609a      	str	r2, [r3, #8]
      break;
 8101f9e:	e04f      	b.n	8102040 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8101fa4:	683b      	ldr	r3, [r7, #0]
 8101fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8101fa8:	683b      	ldr	r3, [r7, #0]
 8101faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8101fac:	683b      	ldr	r3, [r7, #0]
 8101fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8101fb0:	f000 fc84 	bl	81028bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	689a      	ldr	r2, [r3, #8]
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	681b      	ldr	r3, [r3, #0]
 8101fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8101fc2:	609a      	str	r2, [r3, #8]
      break;
 8101fc4:	e03c      	b.n	8102040 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8101fca:	683b      	ldr	r3, [r7, #0]
 8101fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8101fce:	683b      	ldr	r3, [r7, #0]
 8101fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8101fd2:	461a      	mov	r2, r3
 8101fd4:	f000 fbf6 	bl	81027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	681b      	ldr	r3, [r3, #0]
 8101fdc:	2150      	movs	r1, #80	; 0x50
 8101fde:	4618      	mov	r0, r3
 8101fe0:	f000 fc4f 	bl	8102882 <TIM_ITRx_SetConfig>
      break;
 8101fe4:	e02c      	b.n	8102040 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8101fea:	683b      	ldr	r3, [r7, #0]
 8101fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8101fee:	683b      	ldr	r3, [r7, #0]
 8101ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8101ff2:	461a      	mov	r2, r3
 8101ff4:	f000 fc15 	bl	8102822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	2160      	movs	r1, #96	; 0x60
 8101ffe:	4618      	mov	r0, r3
 8102000:	f000 fc3f 	bl	8102882 <TIM_ITRx_SetConfig>
      break;
 8102004:	e01c      	b.n	8102040 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810200a:	683b      	ldr	r3, [r7, #0]
 810200c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810200e:	683b      	ldr	r3, [r7, #0]
 8102010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8102012:	461a      	mov	r2, r3
 8102014:	f000 fbd6 	bl	81027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	2140      	movs	r1, #64	; 0x40
 810201e:	4618      	mov	r0, r3
 8102020:	f000 fc2f 	bl	8102882 <TIM_ITRx_SetConfig>
      break;
 8102024:	e00c      	b.n	8102040 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	681a      	ldr	r2, [r3, #0]
 810202a:	683b      	ldr	r3, [r7, #0]
 810202c:	681b      	ldr	r3, [r3, #0]
 810202e:	4619      	mov	r1, r3
 8102030:	4610      	mov	r0, r2
 8102032:	f000 fc26 	bl	8102882 <TIM_ITRx_SetConfig>
      break;
 8102036:	e003      	b.n	8102040 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8102038:	2301      	movs	r3, #1
 810203a:	73fb      	strb	r3, [r7, #15]
      break;
 810203c:	e000      	b.n	8102040 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810203e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	2201      	movs	r2, #1
 8102044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8102048:	687b      	ldr	r3, [r7, #4]
 810204a:	2200      	movs	r2, #0
 810204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8102050:	7bfb      	ldrb	r3, [r7, #15]
}
 8102052:	4618      	mov	r0, r3
 8102054:	3710      	adds	r7, #16
 8102056:	46bd      	mov	sp, r7
 8102058:	bd80      	pop	{r7, pc}
 810205a:	bf00      	nop
 810205c:	00100040 	.word	0x00100040
 8102060:	00100030 	.word	0x00100030
 8102064:	00100020 	.word	0x00100020

08102068 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102068:	b480      	push	{r7}
 810206a:	b083      	sub	sp, #12
 810206c:	af00      	add	r7, sp, #0
 810206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8102070:	bf00      	nop
 8102072:	370c      	adds	r7, #12
 8102074:	46bd      	mov	sp, r7
 8102076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810207a:	4770      	bx	lr

0810207c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810207c:	b480      	push	{r7}
 810207e:	b083      	sub	sp, #12
 8102080:	af00      	add	r7, sp, #0
 8102082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8102084:	bf00      	nop
 8102086:	370c      	adds	r7, #12
 8102088:	46bd      	mov	sp, r7
 810208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810208e:	4770      	bx	lr

08102090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102090:	b480      	push	{r7}
 8102092:	b083      	sub	sp, #12
 8102094:	af00      	add	r7, sp, #0
 8102096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8102098:	bf00      	nop
 810209a:	370c      	adds	r7, #12
 810209c:	46bd      	mov	sp, r7
 810209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020a2:	4770      	bx	lr

081020a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81020a4:	b480      	push	{r7}
 81020a6:	b083      	sub	sp, #12
 81020a8:	af00      	add	r7, sp, #0
 81020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81020ac:	bf00      	nop
 81020ae:	370c      	adds	r7, #12
 81020b0:	46bd      	mov	sp, r7
 81020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b6:	4770      	bx	lr

081020b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81020b8:	b480      	push	{r7}
 81020ba:	b083      	sub	sp, #12
 81020bc:	af00      	add	r7, sp, #0
 81020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81020c0:	bf00      	nop
 81020c2:	370c      	adds	r7, #12
 81020c4:	46bd      	mov	sp, r7
 81020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ca:	4770      	bx	lr

081020cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81020cc:	b480      	push	{r7}
 81020ce:	b085      	sub	sp, #20
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	6078      	str	r0, [r7, #4]
 81020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	681b      	ldr	r3, [r3, #0]
 81020da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	4a46      	ldr	r2, [pc, #280]	; (81021f8 <TIM_Base_SetConfig+0x12c>)
 81020e0:	4293      	cmp	r3, r2
 81020e2:	d013      	beq.n	810210c <TIM_Base_SetConfig+0x40>
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81020ea:	d00f      	beq.n	810210c <TIM_Base_SetConfig+0x40>
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	4a43      	ldr	r2, [pc, #268]	; (81021fc <TIM_Base_SetConfig+0x130>)
 81020f0:	4293      	cmp	r3, r2
 81020f2:	d00b      	beq.n	810210c <TIM_Base_SetConfig+0x40>
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	4a42      	ldr	r2, [pc, #264]	; (8102200 <TIM_Base_SetConfig+0x134>)
 81020f8:	4293      	cmp	r3, r2
 81020fa:	d007      	beq.n	810210c <TIM_Base_SetConfig+0x40>
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	4a41      	ldr	r2, [pc, #260]	; (8102204 <TIM_Base_SetConfig+0x138>)
 8102100:	4293      	cmp	r3, r2
 8102102:	d003      	beq.n	810210c <TIM_Base_SetConfig+0x40>
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	4a40      	ldr	r2, [pc, #256]	; (8102208 <TIM_Base_SetConfig+0x13c>)
 8102108:	4293      	cmp	r3, r2
 810210a:	d108      	bne.n	810211e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810210c:	68fb      	ldr	r3, [r7, #12]
 810210e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8102114:	683b      	ldr	r3, [r7, #0]
 8102116:	685b      	ldr	r3, [r3, #4]
 8102118:	68fa      	ldr	r2, [r7, #12]
 810211a:	4313      	orrs	r3, r2
 810211c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	4a35      	ldr	r2, [pc, #212]	; (81021f8 <TIM_Base_SetConfig+0x12c>)
 8102122:	4293      	cmp	r3, r2
 8102124:	d01f      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810212c:	d01b      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	4a32      	ldr	r2, [pc, #200]	; (81021fc <TIM_Base_SetConfig+0x130>)
 8102132:	4293      	cmp	r3, r2
 8102134:	d017      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	4a31      	ldr	r2, [pc, #196]	; (8102200 <TIM_Base_SetConfig+0x134>)
 810213a:	4293      	cmp	r3, r2
 810213c:	d013      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	4a30      	ldr	r2, [pc, #192]	; (8102204 <TIM_Base_SetConfig+0x138>)
 8102142:	4293      	cmp	r3, r2
 8102144:	d00f      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	4a2f      	ldr	r2, [pc, #188]	; (8102208 <TIM_Base_SetConfig+0x13c>)
 810214a:	4293      	cmp	r3, r2
 810214c:	d00b      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	4a2e      	ldr	r2, [pc, #184]	; (810220c <TIM_Base_SetConfig+0x140>)
 8102152:	4293      	cmp	r3, r2
 8102154:	d007      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	4a2d      	ldr	r2, [pc, #180]	; (8102210 <TIM_Base_SetConfig+0x144>)
 810215a:	4293      	cmp	r3, r2
 810215c:	d003      	beq.n	8102166 <TIM_Base_SetConfig+0x9a>
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	4a2c      	ldr	r2, [pc, #176]	; (8102214 <TIM_Base_SetConfig+0x148>)
 8102162:	4293      	cmp	r3, r2
 8102164:	d108      	bne.n	8102178 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8102166:	68fb      	ldr	r3, [r7, #12]
 8102168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810216c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810216e:	683b      	ldr	r3, [r7, #0]
 8102170:	68db      	ldr	r3, [r3, #12]
 8102172:	68fa      	ldr	r2, [r7, #12]
 8102174:	4313      	orrs	r3, r2
 8102176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8102178:	68fb      	ldr	r3, [r7, #12]
 810217a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810217e:	683b      	ldr	r3, [r7, #0]
 8102180:	695b      	ldr	r3, [r3, #20]
 8102182:	4313      	orrs	r3, r2
 8102184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	68fa      	ldr	r2, [r7, #12]
 810218a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810218c:	683b      	ldr	r3, [r7, #0]
 810218e:	689a      	ldr	r2, [r3, #8]
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8102194:	683b      	ldr	r3, [r7, #0]
 8102196:	681a      	ldr	r2, [r3, #0]
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810219c:	687b      	ldr	r3, [r7, #4]
 810219e:	4a16      	ldr	r2, [pc, #88]	; (81021f8 <TIM_Base_SetConfig+0x12c>)
 81021a0:	4293      	cmp	r3, r2
 81021a2:	d00f      	beq.n	81021c4 <TIM_Base_SetConfig+0xf8>
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	4a18      	ldr	r2, [pc, #96]	; (8102208 <TIM_Base_SetConfig+0x13c>)
 81021a8:	4293      	cmp	r3, r2
 81021aa:	d00b      	beq.n	81021c4 <TIM_Base_SetConfig+0xf8>
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	4a17      	ldr	r2, [pc, #92]	; (810220c <TIM_Base_SetConfig+0x140>)
 81021b0:	4293      	cmp	r3, r2
 81021b2:	d007      	beq.n	81021c4 <TIM_Base_SetConfig+0xf8>
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	4a16      	ldr	r2, [pc, #88]	; (8102210 <TIM_Base_SetConfig+0x144>)
 81021b8:	4293      	cmp	r3, r2
 81021ba:	d003      	beq.n	81021c4 <TIM_Base_SetConfig+0xf8>
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	4a15      	ldr	r2, [pc, #84]	; (8102214 <TIM_Base_SetConfig+0x148>)
 81021c0:	4293      	cmp	r3, r2
 81021c2:	d103      	bne.n	81021cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81021c4:	683b      	ldr	r3, [r7, #0]
 81021c6:	691a      	ldr	r2, [r3, #16]
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	2201      	movs	r2, #1
 81021d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	691b      	ldr	r3, [r3, #16]
 81021d6:	f003 0301 	and.w	r3, r3, #1
 81021da:	2b01      	cmp	r3, #1
 81021dc:	d105      	bne.n	81021ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	691b      	ldr	r3, [r3, #16]
 81021e2:	f023 0201 	bic.w	r2, r3, #1
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	611a      	str	r2, [r3, #16]
  }
}
 81021ea:	bf00      	nop
 81021ec:	3714      	adds	r7, #20
 81021ee:	46bd      	mov	sp, r7
 81021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f4:	4770      	bx	lr
 81021f6:	bf00      	nop
 81021f8:	40010000 	.word	0x40010000
 81021fc:	40000400 	.word	0x40000400
 8102200:	40000800 	.word	0x40000800
 8102204:	40000c00 	.word	0x40000c00
 8102208:	40010400 	.word	0x40010400
 810220c:	40014000 	.word	0x40014000
 8102210:	40014400 	.word	0x40014400
 8102214:	40014800 	.word	0x40014800

08102218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8102218:	b480      	push	{r7}
 810221a:	b087      	sub	sp, #28
 810221c:	af00      	add	r7, sp, #0
 810221e:	6078      	str	r0, [r7, #4]
 8102220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	6a1b      	ldr	r3, [r3, #32]
 8102226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	6a1b      	ldr	r3, [r3, #32]
 810222c:	f023 0201 	bic.w	r2, r3, #1
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	685b      	ldr	r3, [r3, #4]
 8102238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	699b      	ldr	r3, [r3, #24]
 810223e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8102240:	68fb      	ldr	r3, [r7, #12]
 8102242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810224a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	f023 0303 	bic.w	r3, r3, #3
 8102252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102254:	683b      	ldr	r3, [r7, #0]
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	68fa      	ldr	r2, [r7, #12]
 810225a:	4313      	orrs	r3, r2
 810225c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810225e:	697b      	ldr	r3, [r7, #20]
 8102260:	f023 0302 	bic.w	r3, r3, #2
 8102264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8102266:	683b      	ldr	r3, [r7, #0]
 8102268:	689b      	ldr	r3, [r3, #8]
 810226a:	697a      	ldr	r2, [r7, #20]
 810226c:	4313      	orrs	r3, r2
 810226e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	4a2c      	ldr	r2, [pc, #176]	; (8102324 <TIM_OC1_SetConfig+0x10c>)
 8102274:	4293      	cmp	r3, r2
 8102276:	d00f      	beq.n	8102298 <TIM_OC1_SetConfig+0x80>
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	4a2b      	ldr	r2, [pc, #172]	; (8102328 <TIM_OC1_SetConfig+0x110>)
 810227c:	4293      	cmp	r3, r2
 810227e:	d00b      	beq.n	8102298 <TIM_OC1_SetConfig+0x80>
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	4a2a      	ldr	r2, [pc, #168]	; (810232c <TIM_OC1_SetConfig+0x114>)
 8102284:	4293      	cmp	r3, r2
 8102286:	d007      	beq.n	8102298 <TIM_OC1_SetConfig+0x80>
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	4a29      	ldr	r2, [pc, #164]	; (8102330 <TIM_OC1_SetConfig+0x118>)
 810228c:	4293      	cmp	r3, r2
 810228e:	d003      	beq.n	8102298 <TIM_OC1_SetConfig+0x80>
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	4a28      	ldr	r2, [pc, #160]	; (8102334 <TIM_OC1_SetConfig+0x11c>)
 8102294:	4293      	cmp	r3, r2
 8102296:	d10c      	bne.n	81022b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8102298:	697b      	ldr	r3, [r7, #20]
 810229a:	f023 0308 	bic.w	r3, r3, #8
 810229e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81022a0:	683b      	ldr	r3, [r7, #0]
 81022a2:	68db      	ldr	r3, [r3, #12]
 81022a4:	697a      	ldr	r2, [r7, #20]
 81022a6:	4313      	orrs	r3, r2
 81022a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81022aa:	697b      	ldr	r3, [r7, #20]
 81022ac:	f023 0304 	bic.w	r3, r3, #4
 81022b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81022b2:	687b      	ldr	r3, [r7, #4]
 81022b4:	4a1b      	ldr	r2, [pc, #108]	; (8102324 <TIM_OC1_SetConfig+0x10c>)
 81022b6:	4293      	cmp	r3, r2
 81022b8:	d00f      	beq.n	81022da <TIM_OC1_SetConfig+0xc2>
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	4a1a      	ldr	r2, [pc, #104]	; (8102328 <TIM_OC1_SetConfig+0x110>)
 81022be:	4293      	cmp	r3, r2
 81022c0:	d00b      	beq.n	81022da <TIM_OC1_SetConfig+0xc2>
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	4a19      	ldr	r2, [pc, #100]	; (810232c <TIM_OC1_SetConfig+0x114>)
 81022c6:	4293      	cmp	r3, r2
 81022c8:	d007      	beq.n	81022da <TIM_OC1_SetConfig+0xc2>
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	4a18      	ldr	r2, [pc, #96]	; (8102330 <TIM_OC1_SetConfig+0x118>)
 81022ce:	4293      	cmp	r3, r2
 81022d0:	d003      	beq.n	81022da <TIM_OC1_SetConfig+0xc2>
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	4a17      	ldr	r2, [pc, #92]	; (8102334 <TIM_OC1_SetConfig+0x11c>)
 81022d6:	4293      	cmp	r3, r2
 81022d8:	d111      	bne.n	81022fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81022da:	693b      	ldr	r3, [r7, #16]
 81022dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81022e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81022e2:	693b      	ldr	r3, [r7, #16]
 81022e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81022e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81022ea:	683b      	ldr	r3, [r7, #0]
 81022ec:	695b      	ldr	r3, [r3, #20]
 81022ee:	693a      	ldr	r2, [r7, #16]
 81022f0:	4313      	orrs	r3, r2
 81022f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81022f4:	683b      	ldr	r3, [r7, #0]
 81022f6:	699b      	ldr	r3, [r3, #24]
 81022f8:	693a      	ldr	r2, [r7, #16]
 81022fa:	4313      	orrs	r3, r2
 81022fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	693a      	ldr	r2, [r7, #16]
 8102302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	68fa      	ldr	r2, [r7, #12]
 8102308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810230a:	683b      	ldr	r3, [r7, #0]
 810230c:	685a      	ldr	r2, [r3, #4]
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	697a      	ldr	r2, [r7, #20]
 8102316:	621a      	str	r2, [r3, #32]
}
 8102318:	bf00      	nop
 810231a:	371c      	adds	r7, #28
 810231c:	46bd      	mov	sp, r7
 810231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102322:	4770      	bx	lr
 8102324:	40010000 	.word	0x40010000
 8102328:	40010400 	.word	0x40010400
 810232c:	40014000 	.word	0x40014000
 8102330:	40014400 	.word	0x40014400
 8102334:	40014800 	.word	0x40014800

08102338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8102338:	b480      	push	{r7}
 810233a:	b087      	sub	sp, #28
 810233c:	af00      	add	r7, sp, #0
 810233e:	6078      	str	r0, [r7, #4]
 8102340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	6a1b      	ldr	r3, [r3, #32]
 8102346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	6a1b      	ldr	r3, [r3, #32]
 810234c:	f023 0210 	bic.w	r2, r3, #16
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	685b      	ldr	r3, [r3, #4]
 8102358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	699b      	ldr	r3, [r3, #24]
 810235e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8102360:	68fb      	ldr	r3, [r7, #12]
 8102362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810236a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810236c:	68fb      	ldr	r3, [r7, #12]
 810236e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102374:	683b      	ldr	r3, [r7, #0]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	021b      	lsls	r3, r3, #8
 810237a:	68fa      	ldr	r2, [r7, #12]
 810237c:	4313      	orrs	r3, r2
 810237e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8102380:	697b      	ldr	r3, [r7, #20]
 8102382:	f023 0320 	bic.w	r3, r3, #32
 8102386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8102388:	683b      	ldr	r3, [r7, #0]
 810238a:	689b      	ldr	r3, [r3, #8]
 810238c:	011b      	lsls	r3, r3, #4
 810238e:	697a      	ldr	r2, [r7, #20]
 8102390:	4313      	orrs	r3, r2
 8102392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	4a28      	ldr	r2, [pc, #160]	; (8102438 <TIM_OC2_SetConfig+0x100>)
 8102398:	4293      	cmp	r3, r2
 810239a:	d003      	beq.n	81023a4 <TIM_OC2_SetConfig+0x6c>
 810239c:	687b      	ldr	r3, [r7, #4]
 810239e:	4a27      	ldr	r2, [pc, #156]	; (810243c <TIM_OC2_SetConfig+0x104>)
 81023a0:	4293      	cmp	r3, r2
 81023a2:	d10d      	bne.n	81023c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81023a4:	697b      	ldr	r3, [r7, #20]
 81023a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81023aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81023ac:	683b      	ldr	r3, [r7, #0]
 81023ae:	68db      	ldr	r3, [r3, #12]
 81023b0:	011b      	lsls	r3, r3, #4
 81023b2:	697a      	ldr	r2, [r7, #20]
 81023b4:	4313      	orrs	r3, r2
 81023b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81023b8:	697b      	ldr	r3, [r7, #20]
 81023ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81023be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	4a1d      	ldr	r2, [pc, #116]	; (8102438 <TIM_OC2_SetConfig+0x100>)
 81023c4:	4293      	cmp	r3, r2
 81023c6:	d00f      	beq.n	81023e8 <TIM_OC2_SetConfig+0xb0>
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	4a1c      	ldr	r2, [pc, #112]	; (810243c <TIM_OC2_SetConfig+0x104>)
 81023cc:	4293      	cmp	r3, r2
 81023ce:	d00b      	beq.n	81023e8 <TIM_OC2_SetConfig+0xb0>
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	4a1b      	ldr	r2, [pc, #108]	; (8102440 <TIM_OC2_SetConfig+0x108>)
 81023d4:	4293      	cmp	r3, r2
 81023d6:	d007      	beq.n	81023e8 <TIM_OC2_SetConfig+0xb0>
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	4a1a      	ldr	r2, [pc, #104]	; (8102444 <TIM_OC2_SetConfig+0x10c>)
 81023dc:	4293      	cmp	r3, r2
 81023de:	d003      	beq.n	81023e8 <TIM_OC2_SetConfig+0xb0>
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	4a19      	ldr	r2, [pc, #100]	; (8102448 <TIM_OC2_SetConfig+0x110>)
 81023e4:	4293      	cmp	r3, r2
 81023e6:	d113      	bne.n	8102410 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81023e8:	693b      	ldr	r3, [r7, #16]
 81023ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81023ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81023f0:	693b      	ldr	r3, [r7, #16]
 81023f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81023f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81023f8:	683b      	ldr	r3, [r7, #0]
 81023fa:	695b      	ldr	r3, [r3, #20]
 81023fc:	009b      	lsls	r3, r3, #2
 81023fe:	693a      	ldr	r2, [r7, #16]
 8102400:	4313      	orrs	r3, r2
 8102402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8102404:	683b      	ldr	r3, [r7, #0]
 8102406:	699b      	ldr	r3, [r3, #24]
 8102408:	009b      	lsls	r3, r3, #2
 810240a:	693a      	ldr	r2, [r7, #16]
 810240c:	4313      	orrs	r3, r2
 810240e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	693a      	ldr	r2, [r7, #16]
 8102414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	68fa      	ldr	r2, [r7, #12]
 810241a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810241c:	683b      	ldr	r3, [r7, #0]
 810241e:	685a      	ldr	r2, [r3, #4]
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	697a      	ldr	r2, [r7, #20]
 8102428:	621a      	str	r2, [r3, #32]
}
 810242a:	bf00      	nop
 810242c:	371c      	adds	r7, #28
 810242e:	46bd      	mov	sp, r7
 8102430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102434:	4770      	bx	lr
 8102436:	bf00      	nop
 8102438:	40010000 	.word	0x40010000
 810243c:	40010400 	.word	0x40010400
 8102440:	40014000 	.word	0x40014000
 8102444:	40014400 	.word	0x40014400
 8102448:	40014800 	.word	0x40014800

0810244c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810244c:	b480      	push	{r7}
 810244e:	b087      	sub	sp, #28
 8102450:	af00      	add	r7, sp, #0
 8102452:	6078      	str	r0, [r7, #4]
 8102454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	6a1b      	ldr	r3, [r3, #32]
 810245a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	6a1b      	ldr	r3, [r3, #32]
 8102460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	685b      	ldr	r3, [r3, #4]
 810246c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	69db      	ldr	r3, [r3, #28]
 8102472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8102474:	68fb      	ldr	r3, [r7, #12]
 8102476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810247e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8102480:	68fb      	ldr	r3, [r7, #12]
 8102482:	f023 0303 	bic.w	r3, r3, #3
 8102486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102488:	683b      	ldr	r3, [r7, #0]
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	68fa      	ldr	r2, [r7, #12]
 810248e:	4313      	orrs	r3, r2
 8102490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8102492:	697b      	ldr	r3, [r7, #20]
 8102494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810249a:	683b      	ldr	r3, [r7, #0]
 810249c:	689b      	ldr	r3, [r3, #8]
 810249e:	021b      	lsls	r3, r3, #8
 81024a0:	697a      	ldr	r2, [r7, #20]
 81024a2:	4313      	orrs	r3, r2
 81024a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	4a27      	ldr	r2, [pc, #156]	; (8102548 <TIM_OC3_SetConfig+0xfc>)
 81024aa:	4293      	cmp	r3, r2
 81024ac:	d003      	beq.n	81024b6 <TIM_OC3_SetConfig+0x6a>
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	4a26      	ldr	r2, [pc, #152]	; (810254c <TIM_OC3_SetConfig+0x100>)
 81024b2:	4293      	cmp	r3, r2
 81024b4:	d10d      	bne.n	81024d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81024b6:	697b      	ldr	r3, [r7, #20]
 81024b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81024bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81024be:	683b      	ldr	r3, [r7, #0]
 81024c0:	68db      	ldr	r3, [r3, #12]
 81024c2:	021b      	lsls	r3, r3, #8
 81024c4:	697a      	ldr	r2, [r7, #20]
 81024c6:	4313      	orrs	r3, r2
 81024c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81024ca:	697b      	ldr	r3, [r7, #20]
 81024cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81024d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	4a1c      	ldr	r2, [pc, #112]	; (8102548 <TIM_OC3_SetConfig+0xfc>)
 81024d6:	4293      	cmp	r3, r2
 81024d8:	d00f      	beq.n	81024fa <TIM_OC3_SetConfig+0xae>
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	4a1b      	ldr	r2, [pc, #108]	; (810254c <TIM_OC3_SetConfig+0x100>)
 81024de:	4293      	cmp	r3, r2
 81024e0:	d00b      	beq.n	81024fa <TIM_OC3_SetConfig+0xae>
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	4a1a      	ldr	r2, [pc, #104]	; (8102550 <TIM_OC3_SetConfig+0x104>)
 81024e6:	4293      	cmp	r3, r2
 81024e8:	d007      	beq.n	81024fa <TIM_OC3_SetConfig+0xae>
 81024ea:	687b      	ldr	r3, [r7, #4]
 81024ec:	4a19      	ldr	r2, [pc, #100]	; (8102554 <TIM_OC3_SetConfig+0x108>)
 81024ee:	4293      	cmp	r3, r2
 81024f0:	d003      	beq.n	81024fa <TIM_OC3_SetConfig+0xae>
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	4a18      	ldr	r2, [pc, #96]	; (8102558 <TIM_OC3_SetConfig+0x10c>)
 81024f6:	4293      	cmp	r3, r2
 81024f8:	d113      	bne.n	8102522 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81024fa:	693b      	ldr	r3, [r7, #16]
 81024fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8102500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8102502:	693b      	ldr	r3, [r7, #16]
 8102504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810250a:	683b      	ldr	r3, [r7, #0]
 810250c:	695b      	ldr	r3, [r3, #20]
 810250e:	011b      	lsls	r3, r3, #4
 8102510:	693a      	ldr	r2, [r7, #16]
 8102512:	4313      	orrs	r3, r2
 8102514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8102516:	683b      	ldr	r3, [r7, #0]
 8102518:	699b      	ldr	r3, [r3, #24]
 810251a:	011b      	lsls	r3, r3, #4
 810251c:	693a      	ldr	r2, [r7, #16]
 810251e:	4313      	orrs	r3, r2
 8102520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	693a      	ldr	r2, [r7, #16]
 8102526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	68fa      	ldr	r2, [r7, #12]
 810252c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810252e:	683b      	ldr	r3, [r7, #0]
 8102530:	685a      	ldr	r2, [r3, #4]
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	697a      	ldr	r2, [r7, #20]
 810253a:	621a      	str	r2, [r3, #32]
}
 810253c:	bf00      	nop
 810253e:	371c      	adds	r7, #28
 8102540:	46bd      	mov	sp, r7
 8102542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102546:	4770      	bx	lr
 8102548:	40010000 	.word	0x40010000
 810254c:	40010400 	.word	0x40010400
 8102550:	40014000 	.word	0x40014000
 8102554:	40014400 	.word	0x40014400
 8102558:	40014800 	.word	0x40014800

0810255c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810255c:	b480      	push	{r7}
 810255e:	b087      	sub	sp, #28
 8102560:	af00      	add	r7, sp, #0
 8102562:	6078      	str	r0, [r7, #4]
 8102564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	6a1b      	ldr	r3, [r3, #32]
 810256a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	6a1b      	ldr	r3, [r3, #32]
 8102570:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	685b      	ldr	r3, [r3, #4]
 810257c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	69db      	ldr	r3, [r3, #28]
 8102582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8102584:	68fb      	ldr	r3, [r7, #12]
 8102586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810258a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810258e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102598:	683b      	ldr	r3, [r7, #0]
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	021b      	lsls	r3, r3, #8
 810259e:	68fa      	ldr	r2, [r7, #12]
 81025a0:	4313      	orrs	r3, r2
 81025a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81025a4:	693b      	ldr	r3, [r7, #16]
 81025a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81025aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81025ac:	683b      	ldr	r3, [r7, #0]
 81025ae:	689b      	ldr	r3, [r3, #8]
 81025b0:	031b      	lsls	r3, r3, #12
 81025b2:	693a      	ldr	r2, [r7, #16]
 81025b4:	4313      	orrs	r3, r2
 81025b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	4a18      	ldr	r2, [pc, #96]	; (810261c <TIM_OC4_SetConfig+0xc0>)
 81025bc:	4293      	cmp	r3, r2
 81025be:	d00f      	beq.n	81025e0 <TIM_OC4_SetConfig+0x84>
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	4a17      	ldr	r2, [pc, #92]	; (8102620 <TIM_OC4_SetConfig+0xc4>)
 81025c4:	4293      	cmp	r3, r2
 81025c6:	d00b      	beq.n	81025e0 <TIM_OC4_SetConfig+0x84>
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	4a16      	ldr	r2, [pc, #88]	; (8102624 <TIM_OC4_SetConfig+0xc8>)
 81025cc:	4293      	cmp	r3, r2
 81025ce:	d007      	beq.n	81025e0 <TIM_OC4_SetConfig+0x84>
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	4a15      	ldr	r2, [pc, #84]	; (8102628 <TIM_OC4_SetConfig+0xcc>)
 81025d4:	4293      	cmp	r3, r2
 81025d6:	d003      	beq.n	81025e0 <TIM_OC4_SetConfig+0x84>
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	4a14      	ldr	r2, [pc, #80]	; (810262c <TIM_OC4_SetConfig+0xd0>)
 81025dc:	4293      	cmp	r3, r2
 81025de:	d109      	bne.n	81025f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81025e0:	697b      	ldr	r3, [r7, #20]
 81025e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81025e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81025e8:	683b      	ldr	r3, [r7, #0]
 81025ea:	695b      	ldr	r3, [r3, #20]
 81025ec:	019b      	lsls	r3, r3, #6
 81025ee:	697a      	ldr	r2, [r7, #20]
 81025f0:	4313      	orrs	r3, r2
 81025f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	697a      	ldr	r2, [r7, #20]
 81025f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	68fa      	ldr	r2, [r7, #12]
 81025fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8102600:	683b      	ldr	r3, [r7, #0]
 8102602:	685a      	ldr	r2, [r3, #4]
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	693a      	ldr	r2, [r7, #16]
 810260c:	621a      	str	r2, [r3, #32]
}
 810260e:	bf00      	nop
 8102610:	371c      	adds	r7, #28
 8102612:	46bd      	mov	sp, r7
 8102614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102618:	4770      	bx	lr
 810261a:	bf00      	nop
 810261c:	40010000 	.word	0x40010000
 8102620:	40010400 	.word	0x40010400
 8102624:	40014000 	.word	0x40014000
 8102628:	40014400 	.word	0x40014400
 810262c:	40014800 	.word	0x40014800

08102630 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8102630:	b480      	push	{r7}
 8102632:	b087      	sub	sp, #28
 8102634:	af00      	add	r7, sp, #0
 8102636:	6078      	str	r0, [r7, #4]
 8102638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6a1b      	ldr	r3, [r3, #32]
 810263e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	6a1b      	ldr	r3, [r3, #32]
 8102644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	685b      	ldr	r3, [r3, #4]
 8102650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8102658:	68fb      	ldr	r3, [r7, #12]
 810265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102664:	683b      	ldr	r3, [r7, #0]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	68fa      	ldr	r2, [r7, #12]
 810266a:	4313      	orrs	r3, r2
 810266c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810266e:	693b      	ldr	r3, [r7, #16]
 8102670:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8102674:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8102676:	683b      	ldr	r3, [r7, #0]
 8102678:	689b      	ldr	r3, [r3, #8]
 810267a:	041b      	lsls	r3, r3, #16
 810267c:	693a      	ldr	r2, [r7, #16]
 810267e:	4313      	orrs	r3, r2
 8102680:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	4a17      	ldr	r2, [pc, #92]	; (81026e4 <TIM_OC5_SetConfig+0xb4>)
 8102686:	4293      	cmp	r3, r2
 8102688:	d00f      	beq.n	81026aa <TIM_OC5_SetConfig+0x7a>
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	4a16      	ldr	r2, [pc, #88]	; (81026e8 <TIM_OC5_SetConfig+0xb8>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d00b      	beq.n	81026aa <TIM_OC5_SetConfig+0x7a>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	4a15      	ldr	r2, [pc, #84]	; (81026ec <TIM_OC5_SetConfig+0xbc>)
 8102696:	4293      	cmp	r3, r2
 8102698:	d007      	beq.n	81026aa <TIM_OC5_SetConfig+0x7a>
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	4a14      	ldr	r2, [pc, #80]	; (81026f0 <TIM_OC5_SetConfig+0xc0>)
 810269e:	4293      	cmp	r3, r2
 81026a0:	d003      	beq.n	81026aa <TIM_OC5_SetConfig+0x7a>
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	4a13      	ldr	r2, [pc, #76]	; (81026f4 <TIM_OC5_SetConfig+0xc4>)
 81026a6:	4293      	cmp	r3, r2
 81026a8:	d109      	bne.n	81026be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81026aa:	697b      	ldr	r3, [r7, #20]
 81026ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81026b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81026b2:	683b      	ldr	r3, [r7, #0]
 81026b4:	695b      	ldr	r3, [r3, #20]
 81026b6:	021b      	lsls	r3, r3, #8
 81026b8:	697a      	ldr	r2, [r7, #20]
 81026ba:	4313      	orrs	r3, r2
 81026bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	697a      	ldr	r2, [r7, #20]
 81026c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	68fa      	ldr	r2, [r7, #12]
 81026c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81026ca:	683b      	ldr	r3, [r7, #0]
 81026cc:	685a      	ldr	r2, [r3, #4]
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	693a      	ldr	r2, [r7, #16]
 81026d6:	621a      	str	r2, [r3, #32]
}
 81026d8:	bf00      	nop
 81026da:	371c      	adds	r7, #28
 81026dc:	46bd      	mov	sp, r7
 81026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e2:	4770      	bx	lr
 81026e4:	40010000 	.word	0x40010000
 81026e8:	40010400 	.word	0x40010400
 81026ec:	40014000 	.word	0x40014000
 81026f0:	40014400 	.word	0x40014400
 81026f4:	40014800 	.word	0x40014800

081026f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81026f8:	b480      	push	{r7}
 81026fa:	b087      	sub	sp, #28
 81026fc:	af00      	add	r7, sp, #0
 81026fe:	6078      	str	r0, [r7, #4]
 8102700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	6a1b      	ldr	r3, [r3, #32]
 8102706:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	6a1b      	ldr	r3, [r3, #32]
 810270c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	685b      	ldr	r3, [r3, #4]
 8102718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810272c:	683b      	ldr	r3, [r7, #0]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	021b      	lsls	r3, r3, #8
 8102732:	68fa      	ldr	r2, [r7, #12]
 8102734:	4313      	orrs	r3, r2
 8102736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8102738:	693b      	ldr	r3, [r7, #16]
 810273a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810273e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8102740:	683b      	ldr	r3, [r7, #0]
 8102742:	689b      	ldr	r3, [r3, #8]
 8102744:	051b      	lsls	r3, r3, #20
 8102746:	693a      	ldr	r2, [r7, #16]
 8102748:	4313      	orrs	r3, r2
 810274a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	4a18      	ldr	r2, [pc, #96]	; (81027b0 <TIM_OC6_SetConfig+0xb8>)
 8102750:	4293      	cmp	r3, r2
 8102752:	d00f      	beq.n	8102774 <TIM_OC6_SetConfig+0x7c>
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	4a17      	ldr	r2, [pc, #92]	; (81027b4 <TIM_OC6_SetConfig+0xbc>)
 8102758:	4293      	cmp	r3, r2
 810275a:	d00b      	beq.n	8102774 <TIM_OC6_SetConfig+0x7c>
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	4a16      	ldr	r2, [pc, #88]	; (81027b8 <TIM_OC6_SetConfig+0xc0>)
 8102760:	4293      	cmp	r3, r2
 8102762:	d007      	beq.n	8102774 <TIM_OC6_SetConfig+0x7c>
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	4a15      	ldr	r2, [pc, #84]	; (81027bc <TIM_OC6_SetConfig+0xc4>)
 8102768:	4293      	cmp	r3, r2
 810276a:	d003      	beq.n	8102774 <TIM_OC6_SetConfig+0x7c>
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	4a14      	ldr	r2, [pc, #80]	; (81027c0 <TIM_OC6_SetConfig+0xc8>)
 8102770:	4293      	cmp	r3, r2
 8102772:	d109      	bne.n	8102788 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8102774:	697b      	ldr	r3, [r7, #20]
 8102776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810277a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810277c:	683b      	ldr	r3, [r7, #0]
 810277e:	695b      	ldr	r3, [r3, #20]
 8102780:	029b      	lsls	r3, r3, #10
 8102782:	697a      	ldr	r2, [r7, #20]
 8102784:	4313      	orrs	r3, r2
 8102786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	697a      	ldr	r2, [r7, #20]
 810278c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	68fa      	ldr	r2, [r7, #12]
 8102792:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8102794:	683b      	ldr	r3, [r7, #0]
 8102796:	685a      	ldr	r2, [r3, #4]
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	693a      	ldr	r2, [r7, #16]
 81027a0:	621a      	str	r2, [r3, #32]
}
 81027a2:	bf00      	nop
 81027a4:	371c      	adds	r7, #28
 81027a6:	46bd      	mov	sp, r7
 81027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ac:	4770      	bx	lr
 81027ae:	bf00      	nop
 81027b0:	40010000 	.word	0x40010000
 81027b4:	40010400 	.word	0x40010400
 81027b8:	40014000 	.word	0x40014000
 81027bc:	40014400 	.word	0x40014400
 81027c0:	40014800 	.word	0x40014800

081027c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81027c4:	b480      	push	{r7}
 81027c6:	b087      	sub	sp, #28
 81027c8:	af00      	add	r7, sp, #0
 81027ca:	60f8      	str	r0, [r7, #12]
 81027cc:	60b9      	str	r1, [r7, #8]
 81027ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81027d0:	68fb      	ldr	r3, [r7, #12]
 81027d2:	6a1b      	ldr	r3, [r3, #32]
 81027d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81027d6:	68fb      	ldr	r3, [r7, #12]
 81027d8:	6a1b      	ldr	r3, [r3, #32]
 81027da:	f023 0201 	bic.w	r2, r3, #1
 81027de:	68fb      	ldr	r3, [r7, #12]
 81027e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81027e2:	68fb      	ldr	r3, [r7, #12]
 81027e4:	699b      	ldr	r3, [r3, #24]
 81027e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81027e8:	693b      	ldr	r3, [r7, #16]
 81027ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81027ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	011b      	lsls	r3, r3, #4
 81027f4:	693a      	ldr	r2, [r7, #16]
 81027f6:	4313      	orrs	r3, r2
 81027f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81027fa:	697b      	ldr	r3, [r7, #20]
 81027fc:	f023 030a 	bic.w	r3, r3, #10
 8102800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8102802:	697a      	ldr	r2, [r7, #20]
 8102804:	68bb      	ldr	r3, [r7, #8]
 8102806:	4313      	orrs	r3, r2
 8102808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810280a:	68fb      	ldr	r3, [r7, #12]
 810280c:	693a      	ldr	r2, [r7, #16]
 810280e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8102810:	68fb      	ldr	r3, [r7, #12]
 8102812:	697a      	ldr	r2, [r7, #20]
 8102814:	621a      	str	r2, [r3, #32]
}
 8102816:	bf00      	nop
 8102818:	371c      	adds	r7, #28
 810281a:	46bd      	mov	sp, r7
 810281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102820:	4770      	bx	lr

08102822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8102822:	b480      	push	{r7}
 8102824:	b087      	sub	sp, #28
 8102826:	af00      	add	r7, sp, #0
 8102828:	60f8      	str	r0, [r7, #12]
 810282a:	60b9      	str	r1, [r7, #8]
 810282c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810282e:	68fb      	ldr	r3, [r7, #12]
 8102830:	6a1b      	ldr	r3, [r3, #32]
 8102832:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8102834:	68fb      	ldr	r3, [r7, #12]
 8102836:	6a1b      	ldr	r3, [r3, #32]
 8102838:	f023 0210 	bic.w	r2, r3, #16
 810283c:	68fb      	ldr	r3, [r7, #12]
 810283e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8102840:	68fb      	ldr	r3, [r7, #12]
 8102842:	699b      	ldr	r3, [r3, #24]
 8102844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8102846:	693b      	ldr	r3, [r7, #16]
 8102848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810284c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	031b      	lsls	r3, r3, #12
 8102852:	693a      	ldr	r2, [r7, #16]
 8102854:	4313      	orrs	r3, r2
 8102856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8102858:	697b      	ldr	r3, [r7, #20]
 810285a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810285e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8102860:	68bb      	ldr	r3, [r7, #8]
 8102862:	011b      	lsls	r3, r3, #4
 8102864:	697a      	ldr	r2, [r7, #20]
 8102866:	4313      	orrs	r3, r2
 8102868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810286a:	68fb      	ldr	r3, [r7, #12]
 810286c:	693a      	ldr	r2, [r7, #16]
 810286e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8102870:	68fb      	ldr	r3, [r7, #12]
 8102872:	697a      	ldr	r2, [r7, #20]
 8102874:	621a      	str	r2, [r3, #32]
}
 8102876:	bf00      	nop
 8102878:	371c      	adds	r7, #28
 810287a:	46bd      	mov	sp, r7
 810287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102880:	4770      	bx	lr

08102882 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8102882:	b480      	push	{r7}
 8102884:	b085      	sub	sp, #20
 8102886:	af00      	add	r7, sp, #0
 8102888:	6078      	str	r0, [r7, #4]
 810288a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	689b      	ldr	r3, [r3, #8]
 8102890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8102892:	68fb      	ldr	r3, [r7, #12]
 8102894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8102898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810289c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810289e:	683a      	ldr	r2, [r7, #0]
 81028a0:	68fb      	ldr	r3, [r7, #12]
 81028a2:	4313      	orrs	r3, r2
 81028a4:	f043 0307 	orr.w	r3, r3, #7
 81028a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	68fa      	ldr	r2, [r7, #12]
 81028ae:	609a      	str	r2, [r3, #8]
}
 81028b0:	bf00      	nop
 81028b2:	3714      	adds	r7, #20
 81028b4:	46bd      	mov	sp, r7
 81028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028ba:	4770      	bx	lr

081028bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81028bc:	b480      	push	{r7}
 81028be:	b087      	sub	sp, #28
 81028c0:	af00      	add	r7, sp, #0
 81028c2:	60f8      	str	r0, [r7, #12]
 81028c4:	60b9      	str	r1, [r7, #8]
 81028c6:	607a      	str	r2, [r7, #4]
 81028c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	689b      	ldr	r3, [r3, #8]
 81028ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81028d0:	697b      	ldr	r3, [r7, #20]
 81028d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81028d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81028d8:	683b      	ldr	r3, [r7, #0]
 81028da:	021a      	lsls	r2, r3, #8
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	431a      	orrs	r2, r3
 81028e0:	68bb      	ldr	r3, [r7, #8]
 81028e2:	4313      	orrs	r3, r2
 81028e4:	697a      	ldr	r2, [r7, #20]
 81028e6:	4313      	orrs	r3, r2
 81028e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81028ea:	68fb      	ldr	r3, [r7, #12]
 81028ec:	697a      	ldr	r2, [r7, #20]
 81028ee:	609a      	str	r2, [r3, #8]
}
 81028f0:	bf00      	nop
 81028f2:	371c      	adds	r7, #28
 81028f4:	46bd      	mov	sp, r7
 81028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028fa:	4770      	bx	lr

081028fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81028fc:	b480      	push	{r7}
 81028fe:	b087      	sub	sp, #28
 8102900:	af00      	add	r7, sp, #0
 8102902:	60f8      	str	r0, [r7, #12]
 8102904:	60b9      	str	r1, [r7, #8]
 8102906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8102908:	68bb      	ldr	r3, [r7, #8]
 810290a:	f003 031f 	and.w	r3, r3, #31
 810290e:	2201      	movs	r2, #1
 8102910:	fa02 f303 	lsl.w	r3, r2, r3
 8102914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8102916:	68fb      	ldr	r3, [r7, #12]
 8102918:	6a1a      	ldr	r2, [r3, #32]
 810291a:	697b      	ldr	r3, [r7, #20]
 810291c:	43db      	mvns	r3, r3
 810291e:	401a      	ands	r2, r3
 8102920:	68fb      	ldr	r3, [r7, #12]
 8102922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8102924:	68fb      	ldr	r3, [r7, #12]
 8102926:	6a1a      	ldr	r2, [r3, #32]
 8102928:	68bb      	ldr	r3, [r7, #8]
 810292a:	f003 031f 	and.w	r3, r3, #31
 810292e:	6879      	ldr	r1, [r7, #4]
 8102930:	fa01 f303 	lsl.w	r3, r1, r3
 8102934:	431a      	orrs	r2, r3
 8102936:	68fb      	ldr	r3, [r7, #12]
 8102938:	621a      	str	r2, [r3, #32]
}
 810293a:	bf00      	nop
 810293c:	371c      	adds	r7, #28
 810293e:	46bd      	mov	sp, r7
 8102940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102944:	4770      	bx	lr
	...

08102948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8102948:	b480      	push	{r7}
 810294a:	b085      	sub	sp, #20
 810294c:	af00      	add	r7, sp, #0
 810294e:	6078      	str	r0, [r7, #4]
 8102950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102958:	2b01      	cmp	r3, #1
 810295a:	d101      	bne.n	8102960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810295c:	2302      	movs	r3, #2
 810295e:	e06d      	b.n	8102a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	2201      	movs	r2, #1
 8102964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	2202      	movs	r2, #2
 810296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	685b      	ldr	r3, [r3, #4]
 8102976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	681b      	ldr	r3, [r3, #0]
 810297c:	689b      	ldr	r3, [r3, #8]
 810297e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	4a30      	ldr	r2, [pc, #192]	; (8102a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8102986:	4293      	cmp	r3, r2
 8102988:	d004      	beq.n	8102994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	4a2f      	ldr	r2, [pc, #188]	; (8102a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8102990:	4293      	cmp	r3, r2
 8102992:	d108      	bne.n	81029a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8102994:	68fb      	ldr	r3, [r7, #12]
 8102996:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810299a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810299c:	683b      	ldr	r3, [r7, #0]
 810299e:	685b      	ldr	r3, [r3, #4]
 81029a0:	68fa      	ldr	r2, [r7, #12]
 81029a2:	4313      	orrs	r3, r2
 81029a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81029a6:	68fb      	ldr	r3, [r7, #12]
 81029a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81029ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81029ae:	683b      	ldr	r3, [r7, #0]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	68fa      	ldr	r2, [r7, #12]
 81029b4:	4313      	orrs	r3, r2
 81029b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	68fa      	ldr	r2, [r7, #12]
 81029be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a20      	ldr	r2, [pc, #128]	; (8102a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d022      	beq.n	8102a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81029d2:	d01d      	beq.n	8102a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	4a1d      	ldr	r2, [pc, #116]	; (8102a50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81029da:	4293      	cmp	r3, r2
 81029dc:	d018      	beq.n	8102a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4a1c      	ldr	r2, [pc, #112]	; (8102a54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81029e4:	4293      	cmp	r3, r2
 81029e6:	d013      	beq.n	8102a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4a1a      	ldr	r2, [pc, #104]	; (8102a58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81029ee:	4293      	cmp	r3, r2
 81029f0:	d00e      	beq.n	8102a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a15      	ldr	r2, [pc, #84]	; (8102a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d009      	beq.n	8102a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a16      	ldr	r2, [pc, #88]	; (8102a5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8102a02:	4293      	cmp	r3, r2
 8102a04:	d004      	beq.n	8102a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	4a15      	ldr	r2, [pc, #84]	; (8102a60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d10c      	bne.n	8102a2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8102a10:	68bb      	ldr	r3, [r7, #8]
 8102a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8102a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8102a18:	683b      	ldr	r3, [r7, #0]
 8102a1a:	689b      	ldr	r3, [r3, #8]
 8102a1c:	68ba      	ldr	r2, [r7, #8]
 8102a1e:	4313      	orrs	r3, r2
 8102a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	68ba      	ldr	r2, [r7, #8]
 8102a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	2201      	movs	r2, #1
 8102a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	2200      	movs	r2, #0
 8102a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102a3a:	2300      	movs	r3, #0
}
 8102a3c:	4618      	mov	r0, r3
 8102a3e:	3714      	adds	r7, #20
 8102a40:	46bd      	mov	sp, r7
 8102a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a46:	4770      	bx	lr
 8102a48:	40010000 	.word	0x40010000
 8102a4c:	40010400 	.word	0x40010400
 8102a50:	40000400 	.word	0x40000400
 8102a54:	40000800 	.word	0x40000800
 8102a58:	40000c00 	.word	0x40000c00
 8102a5c:	40001800 	.word	0x40001800
 8102a60:	40014000 	.word	0x40014000

08102a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8102a64:	b480      	push	{r7}
 8102a66:	b083      	sub	sp, #12
 8102a68:	af00      	add	r7, sp, #0
 8102a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8102a6c:	bf00      	nop
 8102a6e:	370c      	adds	r7, #12
 8102a70:	46bd      	mov	sp, r7
 8102a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a76:	4770      	bx	lr

08102a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8102a78:	b480      	push	{r7}
 8102a7a:	b083      	sub	sp, #12
 8102a7c:	af00      	add	r7, sp, #0
 8102a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8102a80:	bf00      	nop
 8102a82:	370c      	adds	r7, #12
 8102a84:	46bd      	mov	sp, r7
 8102a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a8a:	4770      	bx	lr

08102a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8102a8c:	b480      	push	{r7}
 8102a8e:	b083      	sub	sp, #12
 8102a90:	af00      	add	r7, sp, #0
 8102a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8102a94:	bf00      	nop
 8102a96:	370c      	adds	r7, #12
 8102a98:	46bd      	mov	sp, r7
 8102a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a9e:	4770      	bx	lr

08102aa0 <__libc_init_array>:
 8102aa0:	b570      	push	{r4, r5, r6, lr}
 8102aa2:	4d0d      	ldr	r5, [pc, #52]	; (8102ad8 <__libc_init_array+0x38>)
 8102aa4:	4c0d      	ldr	r4, [pc, #52]	; (8102adc <__libc_init_array+0x3c>)
 8102aa6:	1b64      	subs	r4, r4, r5
 8102aa8:	10a4      	asrs	r4, r4, #2
 8102aaa:	2600      	movs	r6, #0
 8102aac:	42a6      	cmp	r6, r4
 8102aae:	d109      	bne.n	8102ac4 <__libc_init_array+0x24>
 8102ab0:	4d0b      	ldr	r5, [pc, #44]	; (8102ae0 <__libc_init_array+0x40>)
 8102ab2:	4c0c      	ldr	r4, [pc, #48]	; (8102ae4 <__libc_init_array+0x44>)
 8102ab4:	f000 f818 	bl	8102ae8 <_init>
 8102ab8:	1b64      	subs	r4, r4, r5
 8102aba:	10a4      	asrs	r4, r4, #2
 8102abc:	2600      	movs	r6, #0
 8102abe:	42a6      	cmp	r6, r4
 8102ac0:	d105      	bne.n	8102ace <__libc_init_array+0x2e>
 8102ac2:	bd70      	pop	{r4, r5, r6, pc}
 8102ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8102ac8:	4798      	blx	r3
 8102aca:	3601      	adds	r6, #1
 8102acc:	e7ee      	b.n	8102aac <__libc_init_array+0xc>
 8102ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8102ad2:	4798      	blx	r3
 8102ad4:	3601      	adds	r6, #1
 8102ad6:	e7f2      	b.n	8102abe <__libc_init_array+0x1e>
 8102ad8:	08102b10 	.word	0x08102b10
 8102adc:	08102b10 	.word	0x08102b10
 8102ae0:	08102b10 	.word	0x08102b10
 8102ae4:	08102b14 	.word	0x08102b14

08102ae8 <_init>:
 8102ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102aea:	bf00      	nop
 8102aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102aee:	bc08      	pop	{r3}
 8102af0:	469e      	mov	lr, r3
 8102af2:	4770      	bx	lr

08102af4 <_fini>:
 8102af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102af6:	bf00      	nop
 8102af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102afa:	bc08      	pop	{r3}
 8102afc:	469e      	mov	lr, r3
 8102afe:	4770      	bx	lr
